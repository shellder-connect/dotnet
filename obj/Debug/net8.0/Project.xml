<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Project</name>
    </assembly>
    <members>
        <member name="M:Project.Controllers.LoginController.ValidarLogin(System.String,System.String)">
            <summary>
                Valida o login do usuário.
            </summary>
            
            <remarks>
            
            ## Validação de Login
            
            Use este endpoint para validar as credenciais de um usuário.
            
            ### Campos que devem ser utilizados para validar o login:
            - **email** string : Email do usuário
            - **senha** string : Senha do usuário
            
            ### Exemplo de body para requisição:
            ```json
                {
                    "email": "joao@exemplo.com",
                    "senha": "senha123"
                }
            ```
            
            ### Exemplo de resposta quando a validação for bem-sucedida:
            
            ```json
                {
                    "message": "Login válido"
                }
            ```
            
            ### Exemplo de resposta quando a validação falhar:
            
            ```json
                {
                    "message": "Usuário ou senha inválidos"
                }
            ```
            </remarks>
            
            <response code="200">Login válido</response>
            <response code="401">Usuário ou senha inválidos</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:EnderecoController.CadastrarEndereco(Project.Models.EnderecoDTO)">
             <summary>
                 Cadastra um novo endereço de preferência para o usuário.
             </summary>
             
             <remarks>
             
             ## Cadastrar novo endereço de preferência para o usuário
             
             Use este endPoint para cadastrar um endereço de peferência para o usuário. Com este endereço, o modelo de IA será capaz de buscar uma  clínica próxima do cliente.
             
             ### Campos que devem ser utilizados para criar um novo dia:
             - **idUsuario** : IdUsuario que deseja registrar o endereço
             - **cep** string : CEP de preferência e não de residência
             - **estado** string : Estado de preferência e não de residência
             - **cidade** string : Cidade de preferência e não de residência
             - **bairro** string : Bairro de preferência e não de residência
             - **rua** string : Rua de preferência e não de residência
             
             ### Campos que não devem ser utilizados para criar um novo dia:
             - **id** : Id do dia que será gerado automaticamente
            
             
             ### Exemplo de body para requisição:
             
             ```json
                 {   
                     "idUsuario": "67cc95b32811515d372209ce",
                     "cep": "12345678",
                     "estado": "São Paulo",
                     "cidade": "São Paulo",
                     "bairro": "Centro",
                     "rua": "Cantori 30"
                 }
             ```
             
             ### Exemplo de resposta:
             
             ```json
                 {   
                     "id": "67cc95b32811515d37220000",
                     "idUsuario": "67cc95b32811515d372209ce",
                     "cep": "12345678",
                     "estado": "São Paulo",
                     "cidade": "São Paulo",
                     "bairro": "Centro",
                     "rua": "Cantori 30"
                 }
             ```
             
             </remarks>
             <response code="201">Endereço criado com sucesso</response>
             <response code="400">Dados inválidos</response>
             <response code="500">Erro interno</response>
        </member>
        <member name="M:EnderecoController.ConsultarTodosEndereco">
             <summary>
                 Consultar o endereço de preferência do usuário.
             </summary>
             
             <remarks>
             
             ## Consultar todos os registros de endereço do banco de dados
             
             Use este endPoint se seu objetivo é recuperar todos os registros de endereços do banco de dados
             
             ### Campos que disponíveis na requisição:
             - **id** : Id do banco de dados, que foi gerado automaticamente.
             - **idUsuario** : IdUsuario que deseja registrar o endereço
             - **cep** string : CEP de preferência e não de residência
             - **estado** string : Estado de preferência e não de residência
             - **cidade** string : Cidade de preferência e não de residência
             - **bairro** string : Bairro de preferência e não de residência
             - **rua** string : Rua de preferência e não de residência
             
             ### Exemplo de body que virá de resposta:
             
             ```json
            [
                {
                    "id": "67cdee51b304fd2aaac177c9",
                    "idUsuario": "67cc95b32811515d372209ce",
                    "cep": "01739018",
                    "estado": "São Paulo",
                    "cidade": "São Paulo",
                    "bairro": "Vila Andrade",
                    "rua": "Cantori 30"
                },
                {
                    "id": "67cdee91b304fd2aaac177ca",
                    "idUsuario": "67cc95b32811515d372209ce",
                    "cep": "05728020",
                    "estado": "São Paulo",
                    "cidade": "São Paulo",
                    "bairro": "Teste",
                    "rua": "Teste"
                }
            ]
             ```
             </remarks>
             
             <response code="200">Endereco consultado com sucesso</response>
             <response code="400">Dados inválidos fornecidos</response>
             <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:EnderecoController.ConsultarEnderecoId(System.String)">
            <summary>
                Consultar um único registro de preferência de endereço que o usuário cadastrou.
            </summary>
            
            <remarks>
            
            ## Consultar um único endereço de preferência registrado, sendo consultado pelo ID do banco de dados
            
            Use este endpoint quando precisar consultar somente um registro com todos campos específicos.
            
            ### Campos que devem ser utilizados para consultar um endereço de preferência:
            
            - **id**: ID do banco e não o idUsuario
            
             ### Exemplo de body para requisição:
             
            ```json
                "id": "67cdee91b304fd2aaac177ca"
            ```
            
            ### Exemplo de body que receberemos como resposta:
            
            ```json
               {
                    "id": "67cdee91b304fd2aaac177ca",
                    "idUsuario": "67cc95b32811515d372209ce",
                    "cep": "05728020",
                    "estado": "São Paulo",
                    "cidade": "São Paulo",
                    "bairro": "Teste",
                    "rua": "Teste"
                }
            ```
            </remarks>
            
            <response code="200">Dia consultado com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:EnderecoController.AtualizarEndereco(System.String,Project.Models.EnderecoDTO)">
            <summary>
                Atualiza o endereço completo existente do usuário, com base no ID do usuário e ID do banco de dados.
            </summary>
            
            <remarks>
            
            ## Atualizar a preferência de endereço cadastrado pelo usuário
            
            Use este endpoint se o objetivo for atualizar todos os campos do endereço no cadastro. Se for parcial, utilize outro endPoint.
            
            ### Exemplo de requisição
            
            ```json
                {   
                    "id": "67ce4b3d61760e36f862dd59",
                    "idUsuario": "67cc95b32811515d372209ce",
                    "cep": "05763290",
                    "estado": "SP", 
                    "cidade": "São Paulo",
                    "Bairro": "Vila Madalena",
                    "Rua": "Rua do Pão de Queijo"
                }
            
            ``` 
            
            ### Se preencher alguns campos e outros não, estes campos serão preenchidos com dados inválidos e default criado pelo sistema.
            </remarks>
            
            
            <param name="id" type="string" example="67cc95b32811515d372209ce">ID do usuário a ser atualizado o endereço.</param>
            <param name="enderecoDTO">Dados do endereço a serem atualizados.</param>
            <response code="200">Endereço atualizado com sucesso</response>
            <response code="400">Dados inválidos</response>
            <response code="401">Endereço não autorizado</response>
            <response code="404">Endereço não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:EnderecoController.AtualizarClinica(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Atualiza parcialmente os dados de um endereço existente
            </summary>
            
            <param name="id" type="string" example="67ce4b3d61760e36f862dd59">ID da endereço a ser atualizada</param>
            <param name="camposParaAtualizar">Campos específicos a serem atualizados</param>
            
            <remarks>
            
            ## Atualização Parcial dos dados
            
            Use este endpoint quando precisar atualizar apenas alguns campos específicos de uma tabela,
            sem a necessidade de enviar todos os dados.
            
            ### Campos que podem ser atualizados:
            - **id**: ID gerado pelo banco de dados
            - **cep**: CEP do endereço
            - **Estado**: Estado do endereço
            - **Cidade**: Cidade do endereço de preferência do usuário
            - **Bairro**: Bairro do endereço
            - **Rua**: Endereço completo com número
            
            ### Campos que não podem ser atualizados:
            - **IdUsuario**: IdUsuario que foi gerado pelo banco de dados
            
            ### Exemplo de requisição:
            
            ```json
            {
                "id": "67ce4b3d61760e36f862dd59",
                "email": "novo.email@clinica.com.br"
            }
            ```
            
            Somente os campos incluídos no corpo da requisição serão atualizados.
            
            ### Exemplo de resposta da requisição:
            
            ```json
            {
                "id": "67cdee91b304fd2aaac177ca",
                "idUsuario": "67cc95b32811515d372209ce",
                "cep": "05763290",
                "estado": "São Paulo",
                "cidade": "São Paulo",
                "bairro": "Teste",
                "rua": "Teste"
            }
            ```
            </remarks>
            
            <response code="200">Clinica atualizada com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="404">Clinica não encontrada</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:EnderecoController.ExcluirEndereco(System.String)">
            <summary>
            Exclui um endereço do usuário.
            </summary>
            
            <remarks>
            
            ## Excluir um endereço de preferência do usuário cadastrado
            
            Use este endoPoint se seu objetivo é excluir um cadastro contendo o endereço de preferência cadastrado errado. 
            
            ### Exemplo da requisição para excluir:
            
            ```json
                {
                    "id": "67cf3f8f8d3a256253f2dab5",
                }
            ```
            
            ### Exemplo da resposta para excluir uma clínica:
            
            ```json
                {
                    "message": "Endereço de preferência excluído com sucesso."
                }
            ``` 
            
            Uma vez excluida da base, não tem reversão desta ação.
            
            </remarks>
            
            <param name="id" type="string" example="67cdee51b304fd2aaac177c9">ID do endereço a ser excluído.</param>
            <response code="200">Endereço excluído com sucesso</response>
            <response code="401">Usuário não autorizado</response>
            <response code="404">Endereço não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:FeedbackController.CadastrarFeedback(Project.Models.Feedback)">
            <summary>
                Cria um novo Feedback.
            </summary>
            
            <remarks>
            
            ## Cadastrar novo Feedback no banco de dados
            
            Use este endpoint para cadastrar um Feedback.
            
            ### Campos que devem ser utilizados para criar um novo Feedback:
            - **Nota** string : Nota do feedback
            - **Comentario** string : Comentário do feedback
            
            ### Campos que não devem ser utilizados para criar um novo Feedback:
            - **Id** : Id do feedback que será gerado automaticamente
            
            ### Exemplo de body para requisição:
            ```json
                {
                    "Nota": "5",
                    "Comentario": "Excelente atendimento!"
                }
            ```
            
            ### Exemplo de resposta quando o cadastro for efetuado:
            
            ```json
                {   
                    "Id": "67cc95b32811515d37220000", // gerado pelo banco de dados
                    "Nota": "5",
                    "Comentario": "Excelente atendimento!"
                }
            ```
            </remarks>
            
            <response code="200">Requisição realizada com sucesso</response>
            <response code="201">Feedback criado com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:FeedbackController.ConsultarTodosFeedbacks">
            <summary>
                Consultar a lista com todos os Feedbacks.
            </summary>
            
            <remarks>
            
            ## Consultar todos os registros de Feedbacks do banco de dados
            
            Use este endpoint se seu objetivo é recuperar todos os registros de Feedbacks do banco de dados.
            
            ### Exemplo de body de resposta, sempre será uma lista com todos os Feedbacks no banco:
            ```json
                [
                    { 
                        "Id": "67cc95b32811515d372209ce",
                        "Nota": "5",
                        "Comentario": "Excelente atendimento!"
                    },
                    {
                        "Id": "67cca0540924d08d2c4b7819",
                        "Nota": "4",
                        "Comentario": "Bom atendimento, mas pode melhorar."
                    }
                ]
            ```
            </remarks>
            
            <response code="200">Requisição realizada com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:FeedbackController.ConsultarFeedbackId(System.String)">
            <summary>
                Consultar um único registro de Feedback.
            </summary>
            
            <remarks>
            
            ## Consultar um único Feedback no banco, sendo consultado pelo ID do banco de dados.
            
            Use este endpoint quando precisar consultar somente um registro com todos os campos específicos.
            
            ### Campo que deve ser utilizado para consultar um Feedback:
            
            - **Id**: ID do banco
            
            ### Exemplo de body para requisição:
            
            ```json
                {
                    "Id": "67cc95b32811515d372209ce"
                }
            ```
            
            ### Exemplo de body que receberemos como resposta:
            
            ```json
               {
                    "Id": "67cc95b32811515d372209ce",
                    "Nota": "5",
                    "Comentario": "Excelente atendimento!"
                }
            ```
            </remarks>
            
            <response code="200">Feedback consultado com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:FeedbackController.AtualizarFeedback(System.String,Project.Models.Feedback)">
            <summary>
                Atualiza os dados completos existentes do Feedback, com base no ID do banco de dados.
            </summary>
            
            <remarks>
            
            ## Atualizar todas as informações do Feedback no banco
            
            Use este endpoint se o objetivo for atualizar todos os campos do Feedback no cadastro. Se for parcial, utilize outro endpoint.
            
            ### Exemplo de requisição:
            
            ```json
                {   
                    "Id": "67ce4b3d61760e36f862dd59",
                    "Nota": "4",
                    "Comentario": "Bom atendimento, mas pode melhorar."
                }
            ``` 
            
            ### Se preencher alguns campos e outros não, estes campos serão preenchidos com dados inválidos e valores padrão criados pelo sistema.
            </remarks>
            
            <param name="id" type="string" example="67cc95b32811515d372209ce">ID do Feedback no banco de dados.</param>
            <param name="feedback">Dados do Feedback a serem atualizados.</param>
            <response code="200">Feedback atualizado com sucesso</response>
            <response code="400">Dados inválidos</response>
            <response code="401">Feedback não autorizado</response>
            <response code="404">Feedback não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:FeedbackController.AtualizarClinica(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Atualiza parcialmente os dados de um Feedback existente.
            </summary>
            
            <param name="id" type="string" example="67cc95b32811515d372209ce">ID do Feedback a ser atualizado</param>
            
            <remarks>
            
            ## Atualização Parcial de um Feedback
            
            Use este endpoint quando precisar atualizar apenas alguns campos específicos de um Feedback,
            sem a necessidade de enviar todos os dados.
            
            ### Campos que podem ser atualizados:
            - **Nota**: Nota do feedback
            - **Comentario**: Comentário do feedback
            
            ### Campos que não podem ser atualizados:
            - **Id**: ID do feedback gerado automaticamente
            
            ### Exemplo de requisição:
            
            ```json
            {
                "Id": "67cc95b32811515d372209ce",
                "Comentario": "Atendimento satisfatório."
            }
            ```
            
            Somente os campos incluídos no corpo da requisição serão atualizados.
            
            ### Exemplo de resposta da requisição:
            
            ```json
            {
                "Id": "67ce4b3d61760e36f862dd59",
                "Nota": "4",
                "Comentario": "Atendimento satisfatório."
            }
            ```
            </remarks>
            
            <param name="camposParaAtualizar"></param>
            
            <response code="200">Feedback atualizado com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="404">Feedback não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:FeedbackController.ExcluirUsuario(System.String)">
             <summary>
                 Excluir um Feedback do banco de dados.
             </summary>
            
             <param name="id" type="string" example="67cc95b32811515d372209ce">ID do Feedback a ser excluído</param>
             
             <remarks>
             
             ## Excluir um Feedback do banco de dados e dos cadastros.
             
             ### Exemplo da requisição para excluir um Feedback:
             
             ```json
                 {
                     "Id": "67cc95b32811515d372209ce"
                 }
             ```
             
             ### Exemplo da resposta para excluir um Feedback:
             
             ```json
                 {
                     "message": "Feedback excluído com sucesso."
                 }
             ``` 
             
             Uma vez excluído da base, não há reversão desta ação.
             </remarks>
             
             <response code="200">Feedback excluído com sucesso</response>
             <response code="400">Dados inválidos fornecidos</response>
             <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:UsuarioController.CadastrarUsuario(Project.Models.Usuario)">
            <summary>
                Cria um novo usuário.
            </summary>
            
            <remarks>
            
            ## Cadastrar novo usuário no banco de dados
            
            Use este endPoint para cadastrar um usuário. Somente usuários cadastrados podem efetuar o Login na plataforma.
            
            ### Campos que devem ser utilizados para criar um novo dia:
            - **nome** string : Nome completo do usuário
            - **cpf** string : CPF oficial do usuário com 11 digitos
            - **telefone** string : Telefone de contato
            - **email** string : Email principal de contato
            - **senha** string : Senha de acesso (teremos hash para proteger a senha)
            - **perfil** string : Todos os usuários cadastrados nesta rota, nasceram com perfil padrão = "Comum"
            
            ### Campos que não devem ser utilizados para criar um novo dia:
            - **id** : Id do dia que será gerado automaticamente
            - **idUsuario** : IdUsuario será uma cópia do Id e utilizado nas demais tabelas. Será gerado de forma automática.   
            
            
            ### Exemplo de body para requisição:
            ```json
                {
                    "nome": "João",
                    "cpf": "12345678910",
                    "sobrenome": "Silva",
                    "email": "joao@exemplo.com",
                    "senha": "senha123",
                    "perfil": "Comum"
                }
            ```
            
            ### Exemplo de resposta quando o cadastro for efetuado:
            
            ```json
                {   
                    "id": "67cc95b32811515d37220000", -- gerado pelo banco de dados
                    "nome": "Delfos Machine",
                    "cpf": "12345678910",
                    "telefone": "11975776758",
                    "email": "delfos@delfos.com",
                    "senha": "123456",
                    "perfil": "Comum"
                }
            ```
            </remarks>
            
            <response code="200">Requisição realizada com sucesso</response>
            <response code="201">Usuário criado com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:UsuarioController.ConsultarTodosUsuarios">
            <summary>
                Consultar a lista com todo os usuários.
            </summary>
            
            <remarks>
            
            ## Consultar todos os registros de usuários do banco de dados
            
            Use este endPoint se seu objetivo é recuperar todos os registros de usuários do banco de dados
            
            ### Campos disponiveis para consultar os usuários:
            - **id** : Id do dia que será gerado automaticamente
            - **nome** string : Nome completo do usuário
            - **cpf** string : CPF oficial do usuário com 11 digitos
            - **telefone** string : Telefone de contato
            - **email** string : Email principal de contato
            - **senha** string : Senha de acesso (teremos hash para proteger a senha)
            - **perfil** string : Todos os usuários cadastrados nesta rota, nasceram com perfil padrão = "Comum"
            
            Exemplo de body de resposta, sempre será uma lista com todos os usuários no banco:
            ```json
                [
                    { 
                        "id": "67cc95b32811515d372209ce",
                        "nome": "claudio",
                        "cpf": "12345678910",
                        "telefone": "11958757740",
                        "email": "claudio_cssp@hotmail.com",
                        "senha": "123456"
                    },
                    {
                        "id": "67cca0540924d08d2c4b7819",
                        "nome": "Caio",
                        "cpf": "12345678910",
                        "telefone": "11958757740",
                        "email": "caio@delfos.com",
                        "senha": "123456"
                    }
                ]
            ```
            </remarks>
            
            <response code="200">Usuário criado com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:UsuarioController.ConsultarUsuarioId(System.String)">
            <summary>
                Consultar um único registro de usuário
            </summary>
            
            <remarks>
            
            ## Consultar um único usuário no banco, sendo consultado pelo ID do banco de dados
            
            Use este endpoint quando precisar consultar somente um registro com todos campos específicos.
            
            ### Campos que devem ser utilizados para consultar um usuário:
            
            - **id**: ID do banco
            
             ### Exemplo de body para requisição:
             
            ```json
                "id": "67cc95b32811515d372209ce"
            ```
            
            ### Exemplo de body que receberemos como resposta:
            
            ```json
               {
                    "id": "67cc95b32811515d372209ce",
                    "nome": "Claudio",
                    "cpf": "12345678910",
                    "telefone": "11958755567",
                    "email": "delfos@delfosmachine.com",
                    "senha": "123456",
                    "perfil": "Comum"
                }
            ```
            </remarks>
            
            <response code="200">Usuário consultado com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:UsuarioController.AtualizarUsuario(System.String,Project.Models.Usuario)">
            <summary>
                Atualiza os dados completos existente do usuário, com base no ID do banco de dados
            </summary>
            
            <remarks>
            
            ## Atualizar todas as informações do usuário no banco
            
            Use este endpoint se o objetivo for atualizar todos os campos para o usuário no cadastro. Se for parcial, utilize outro endPoint.
            
            ### Exemplo de requisição
            
            ```json
                {   
                    "id": "67ce4b3d61760e36f862dd59",
                    "nome": "Patricia Delfos",
                    "cpf": "12345678910",
                    "telefone": "1155122066",
                    "email": "patricia@delfos.com", 
                    "senha": "123456",
                    "perfil": "Comum"
                }
            ``` 
            
            ### Se preencher alguns campos e outros não, estes campos serão preenchidos com dados inválidos e default criado pelo sistema.
            </remarks>
            
            
            <param name="id" type="string" example="67cc95b32811515d372209ce">ID do usuário no banco de dados.</param>
            <param name="usuario">Dados do usuário a serem atualizados.</param>
            <response code="200">Usuário atualizado com sucesso</response>
            <response code="400">Dados inválidos</response>
            <response code="401">Usuário não autorizado</response>
            <response code="404">Usuário não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:UsuarioController.AtualizarParcial(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Atualiza parcialmente os dados de uma usuário existente
            </summary>
            
            <param name="id" type="string" example="67cc95b32811515d372209ce">ID do usuário a ser atualizada</param>
            
            <remarks>
            
            ## Atualização Parcial de um Usuário
            
            Use este endpoint quando precisar atualizar apenas alguns campos específicos de um usuário,
            sem a necessidade de enviar todos os dados.
            
            ### Campos que podem ser atualizados:
            - **nome**: Nome do usuário
            - **cpf** string : CPF oficial do usuário com 11 digitos
            - **telefone**: Número de telefone para contato
            - **email**: Endereço de email para contato
            - **senha**: Senha de acesso (será criptografada)
            
            ### Campos que não podem ser atualizados:
            - **Perfil**: Perfil = Comum pois a rota utilizada foi a de clientes e não de parceiros
            
            ### Exemplo de requisição:
            
            ```json
            {
                "id": "67cc95b32811515d372209ce",
                "email": "novo.email@delfo.com.br"
            }
            ```
            
            Somente os campos incluídos no corpo da requisição serão atualizados.
            
            ### Exemplo de resposta da requisição:
            
            ```json
            {
                "id": "67ce4b3d61760e36f862dd59",
                "nome": "Delfos",
                "cpf": "12345678910",
                "telefone": "string",
                "email": "delfos@delfos.com", -- Validação pode ser feita pelo campo informado!
                "senha": "string",
                "perfil": "Comum"
            }
            ```
            </remarks>
            
            <param name="camposParaAtualizar"></param>
            
            <response code="200">Usuário atualizada com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="404">Usuário não encontrada</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:UsuarioController.ExcluirUsuario(System.String)">
             <summary>
                 Excluir os Usuário do banco de dados.
             </summary>
            
             <param name="id" type="string" example="67cc95b32811515d372209ce">ID do Usuário a ser excluído</param>
             
             <remarks>
             
             ## Excluir um Usuário do banco de dados e dos cadastros.
             
             ### Exemplo da requisição para excluir um Usuário:
             
             ```json
                 {
                     "id": "67cc95b32811515d372209ce",
                 }
             ```
             
             ### Exemplo da resposta para excluir um Usuário:
             
             ```json
                 {
                     "message": "Usuário excluído com sucesso."
                 }
             ``` 
             
             Uma vez excluida da base, não tem reversão desta ação.
             </remarks>
             
             <response code="200">Usuário criado com sucesso</response>
             <response code="400">Dados inválidos fornecidos</response>
             <response code="500">Erro interno do servidor</response>
        </member>
    </members>
</doc>
