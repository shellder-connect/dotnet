<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Project</name>
    </assembly>
    <members>
        <member name="M:Project.Controllers.LoginController.ValidarLogin(System.String,System.String)">
             <summary>
                 Valida o login do usuário.
             </summary>
             
             <remarks>
             
             ## Validação de Login
             
             Use este endpoint para validar as credenciais de um usuário.
             
             ### Campos que devem ser utilizados para validar o login:
             - **email** string : Email do usuário
             - **senha** string : Senha do usuário
             
             ### Exemplo de body para requisição:
            
             ### Exemplo de requisição:
             ```http
             POST http://localhost:3001/ValidarLogin
             ```
             
             ```http
             Header: Key = Content-Type e Value = application/json
             ```
            
             ```json
                 {
                     "email": "joao@exemplo.com",
                     "senha": "senhaSegura123"
                 }
             ```
             
             ### Exemplo de resposta quando a validação for bem-sucedida:
             
             ```json
                 {
                     "message": "Login válido"
                 }
             ```
             
             ### Exemplo de resposta quando a validação falhar:
             
             ```json
                 {
                     "message": "Usuário ou senha inválidos"
                 }
             ```
             </remarks>
             
             <response code="200">Login válido</response>
             <response code="401">Usuário ou senha inválidos</response>
             <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:AbrigoController.CadastrarAbrigo(Project.Models.Abrigo)">
            <summary>
                Cria um novo abrigo.
            </summary>
            
            <remarks>
            
            ## Cadastrar novo abrigo no banco de dados
            
            Use este endpoint para cadastrar um abrigo no sistema.
            
            Requisição via rota:
            ```http
            POST http://localhost:3001/api/Abrigo/CadastrarAbrigo
            ```
            
            ```http
            Content-Type: application/json
            ```
            
            ### Campos que devem ser utilizados para criar um novo abrigo:
            - **descricao** (string): Descrição do abrigo (Ex: "Abrigo Central", "Abrigo Temporário", etc.)
            - **capacidadeTotal** (int): Quantidade máxima de pessoas que o abrigo comporta
            - **ocupacaoAtual** (int): Quantidade atual de pessoas no abrigo
            
            ### Campos que não devem ser enviados:
            - **id**: Gerado automaticamente pelo banco de dados
            
            ### Exemplo de body para requisição:
            ```json
            {
                "descricao": "Abrigo Central",
                "capacidadeTotal": 100,
                "ocupacaoAtual": 25
            }
            ```
            
            ### Exemplo de resposta ao cadastrar com sucesso:
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d93",
                "descricao": "Abrigo Central",
                "capacidadeTotal": 100,
                "ocupacaoAtual": 25
            }
            ```
            
            </remarks>
            
            <response code="200">Requisição realizada com sucesso</response>
            <response code="201">Abrigo criado com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:AbrigoController.ConsultarTodosAbrigo">
            <summary>
                Consultar a lista com todos os abrigos.
            </summary>
            
            <remarks>
            
            ## Consultar todos os registros de abrigos do banco de dados
            
            Use este endpoint para recuperar todos os abrigos armazenados no banco de dados. O abrigo representa uma estrutura com capacidade e ocupação, que pode ser utilizada para gestão e controle dentro da plataforma.
            
            ### Exemplo de requisição:
            
            Requisição via rota:
            ```http
            GET http://localhost:3001/api/Abrigo/ConsultarTodosAbrigo
            ```
            ```http
            Content-Type: application/json
            ```
            
            ### Campos disponíveis na resposta:
            - **id** (string): Identificador único do abrigo (gerado automaticamente pelo banco)
            - **descricao** (string): Descrição do abrigo (Ex: "Abrigo Central", "Abrigo Temporário", etc.)
            - **capacidadeTotal** (int): Quantidade máxima de pessoas que o abrigo comporta
            - **ocupacaoAtual** (int): Quantidade atual de pessoas no abrigo
            
            ### Exemplo de resposta:
            ```json
            [
                {
                    "id": "6659fbbd3fae4c001fcf6d93",
                    "descricao": "Abrigo Central",
                    "capacidadeTotal": 100,
                    "ocupacaoAtual": 25
                },
                {
                    "id": "6659fbbd3fae4c001fcf6e01",
                    "descricao": "Abrigo Temporário",
                    "capacidadeTotal": 50,
                    "ocupacaoAtual": 10
                }
            ]
            ```
            
            </remarks>
            
            <response code="200">Lista de abrigos retornada com sucesso</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:AbrigoController.ConsultarAbrigoId(System.String)">
            <summary>
                Consultar um único registro de abrigo.
            </summary>
            
            <remarks>
            
            ## Consultar um único abrigo pelo ID
            
            Use este endpoint quando precisar recuperar os dados de um abrigo específico, informando o ID armazenado no banco de dados.
            
            ### Parâmetro necessário:
            - **id** (string): ID do abrigo (gerado automaticamente pelo MongoDB)
            
            ### Exemplo de requisição:
            
            Requisição via rota:
            ```http
            GET http://localhost:3001/api/Abrigo/ConsultarAbrigoId/{id}
            ```
            
            ### Campos disponíveis na resposta:
            - **id** (string): Identificador único do abrigo
            - **descricao** (string): Descrição do abrigo (Ex: "Abrigo Central", "Abrigo Temporário", etc.)
            - **capacidadeTotal** (int): Quantidade máxima de pessoas que o abrigo comporta
            - **ocupacaoAtual** (int): Quantidade atual de pessoas no abrigo
            
            ### Exemplo de resposta:
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d93",
                "descricao": "Abrigo Central",
                "capacidadeTotal": 100,
                "ocupacaoAtual": 25
            }
            ```
            
            </remarks>
            
            <response code="200">Abrigo consultado com sucesso</response>
            <response code="400">ID inválido fornecido</response>
            <response code="404">Abrigo não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:AbrigoController.AtualizarAbrigo(System.String,Project.Models.Abrigo)">
            <summary>
                Atualiza todos os dados do abrigo com base no ID.
            </summary>
            
            <remarks>
            
            ## Atualizar todas as informações de um abrigo no banco de dados
            
            Use este endpoint para sobrescrever **todos os campos** do cadastro de um abrigo.
            
            ⚠️ **Atenção:** Se for necessário atualizar apenas alguns campos, utilize o endpoint de **atualização parcial (PATCH)**.
            
            ### Todos os campos devem ser preenchidos:
            - Campos não enviados serão sobrescritos com valores nulos ou padrão.
            
            ### Parâmetro necessário:
            - **id** (string): ID do abrigo (gerado automaticamente pelo MongoDB)
            
            ### Campos no body da requisição:
            - **id** (string): Deve ser o mesmo informado na rota ou pode ser omitido, pois o ID da rota prevalece.
            - **descricao** (string): Descrição do abrigo (Ex: "Abrigo Central", "Abrigo Temporário", etc.)
            - **capacidadeTotal** (int): Quantidade máxima de pessoas que o abrigo comporta
            - **ocupacaoAtual** (int): Quantidade atual de pessoas no abrigo
            
            ### Exemplo de requisição:
            
            Requisição via rota:
            ```http
            PUT http://localhost:3001/api/Abrigo/AtualizarAbrigo/{id}
            ```
            ```http
            Content-Type: application/json
            ```
            
            ### Exemplo de body da requisição:
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d93",
                "descricao": "Abrigo Central",
                "capacidadeTotal": 120,
                "ocupacaoAtual": 30
            }
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d93",
                "descricao": "Abrigo Central",
                "capacidadeTotal": 120,
                "ocupacaoAtual": 30
            }
            ```
            
            </remarks>
            
            <param name="id" type="string" example="6659fbbd3fae4c001fcf6d93">ID do abrigo no banco de dados.</param>
            <param name="abrigo">Objeto contendo os dados completos a serem atualizados.</param>
            
            <response code="200">Abrigo atualizado com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="401">Não autorizado</response>
            <response code="404">Abrigo não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:AbrigoController.AtualizarParcial(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Atualiza parcialmente os dados de um abrigo existente.
            </summary>
            
            <param name="id" type="string" example="6659fbbd3fae4c001fcf6d93">ID do abrigo a ser atualizado.</param>
            <param name="camposParaAtualizar">Objeto contendo os campos que devem ser atualizados.</param>
            
            <remarks>
            
            ## Atualização Parcial de um Abrigo
            
            Use este endpoint quando for necessário atualizar apenas **alguns campos** do abrigo,
            sem a necessidade de enviar todos os dados já cadastrados.
            Somente os campos incluídos no corpo da requisição serão modificados.
            
            ⚠️ **Atenção:** Campos que **não podem ser atualizados** por este endpoint:
            - **id**: O ID do abrigo não pode ser alterado.
            
            ### Campos que podem ser atualizados:
            - **descricao** (string): Descrição do abrigo (Ex: "Abrigo Central", "Abrigo Temporário", etc.)
            - **capacidadeTotal** (int): Quantidade máxima de pessoas que o abrigo comporta
            - **ocupacaoAtual** (int): Quantidade atual de pessoas no abrigo
            
            ### Exemplo de requisição:
            
            Requisição via rota:
            ```http
            PATCH http://localhost:3001/api/Abrigo/AtualizarParcial/{id}
            ```
            ```http
            Content-Type: application/json
            ```
            
            ### Exemplo de body com atualização parcial:
            ```json
            {
                "descricao": "Abrigo Central",
                "ocupacaoAtual": 35
            }
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d93",
                "descricao": "Abrigo Central",
                "capacidadeTotal": 100,
                "ocupacaoAtual": 35
            }
            ```
            
            </remarks>
            
            <response code="200">Abrigo atualizado com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="404">Abrigo não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:AbrigoController.ExcluirAbrigo(System.String)">
            <summary>
                Exclui um abrigo do banco de dados.
            </summary>
            
            <param name="id" type="string" example="6659fbbd3fae4c001fcf6d93">ID do abrigo a ser excluído.</param>
            
            <remarks>
            
            ## Excluir um Abrigo do banco de dados
            
            Use este endpoint para remover permanentemente um abrigo da base de dados.
            
            ⚠️ **Atenção:** A exclusão é irreversível. Todos os dados relacionados a este abrigo serão permanentemente perdidos.
            
            ### Parâmetro necessário:
            - **id** (string): ID do abrigo (gerado automaticamente pelo MongoDB)
            
            ### Exemplo de requisição:
            
            ```http
            DELETE http://localhost:3001/api/Abrigo/ExcluirAbrigo/{id}
            ```
            
            ### Exemplo de resposta ao excluir com sucesso:
            ```json
            {
                "message": "Abrigo excluído com sucesso."
            }
            ```
            
            ### Possíveis respostas de erro:
            - ID inválido ou mal formatado
            - Abrigo não encontrado
            
            </remarks>
            
            <response code="200">Abrigo excluído com sucesso</response>
            <response code="400">ID inválido fornecido</response>
            <response code="404">Abrigo não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:CategoriaController.CadastrarCategoria(Project.Models.Categoria)">
            <summary>
                Cria uma nova categoria.
            </summary>
            
            <remarks>
            
            ## Cadastrar nova categoria no banco de dados
            
            Use este endpoint para cadastrar uma categoria no sistema.
            
            ### Requisição via rota:
            ```http
            POST http://localhost:3001/api/Categoria/CadastrarCategoria
            ```
            
            ```http
            Content-Type: application/json
            ```
            
            ### Campos necessários para criar uma nova categoria:
            - **descricao** (string): Descrição da categoria (Ex: "Alimentos", "Higiene", etc.)
            
            ### Campos que não devem ser enviados:
            - **id**: Gerado automaticamente pelo banco de dados
            
            ### Exemplo de body da requisição:
            ```json
            {
                "descricao": "Alimentos"
            }
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d93",
                "descricao": "Alimentos"
            }
            ```
            
            </remarks>
            
            <response code="200">Requisição realizada com sucesso</response>
            <response code="201">Categoria criada com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:CategoriaController.ConsultarTodasCategorias">
            <summary>
                Consultar a lista com todas as categorias.
            </summary>
            
            <remarks>
            
            ## Consultar todas as categorias do banco de dados
            
            Use este endpoint para recuperar todas as categorias armazenadas.
            
            ### Requisição via rota:
            ```http
            GET http://localhost:3001/api/Categoria/ConsultarTodasCategorias
            ```
            ```http
            Content-Type: application/json
            ```
            
            ### Campos na resposta:
            - **id** (string): Identificador único da categoria
            - **descricao** (string): Descrição da categoria
            
            ### Exemplo de resposta:
            ```json
            [
                {
                    "id": "6659fbbd3fae4c001fcf6d93",
                    "descricao": "Alimentos"
                },
                {
                    "id": "6659fbbd3fae4c001fcf6e01",
                    "descricao": "Higiene"
                }
            ]
            ```
            
            </remarks>
            
            <response code="200">Lista de categorias retornada com sucesso</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:CategoriaController.ConsultarCategoriaId(System.String)">
            <summary>
                Consultar uma única categoria.
            </summary>
            
            <remarks>
            
            ## Consultar uma categoria pelo ID
            
            Use este endpoint para recuperar os dados de uma categoria específica, informando o ID.
            
            ### Parâmetro necessário:
            - **id** (string): ID da categoria
            
            ### Requisição via rota:
            ```http
            GET http://localhost:3001/api/Categoria/ConsultarCategoriaId/{id}
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d93",
                "descricao": "Alimentos"
            }
            ```
            
            </remarks>
            
            <response code="200">Categoria consultada com sucesso</response>
            <response code="400">ID inválido fornecido</response>
            <response code="404">Categoria não encontrada</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:CategoriaController.AtualizarCategoria(System.String,Project.Models.Categoria)">
            <summary>
                Atualiza todos os dados da categoria com base no ID.
            </summary>
            
            <param name="id" type="string" example="6659fbbd3fae4c001fcf6d93">ID da categoria no banco de dados.</param>
            <param name="categoria">Objeto contendo os dados completos a serem atualizados.</param>
            
            <remarks>
            
            ## Atualizar todas as informações de uma categoria
            
            Use este endpoint para sobrescrever **todos os campos** da categoria.
            ⚠️ Campos não enviados serão sobrescritos com valores nulos.
            
            ### Exemplo de requisição:
            ```http
            PUT http://localhost:3001/api/Categoria/AtualizarCategoria/{id}
            ```
            ```http
            Content-Type: application/json
            ```
            
            ### Exemplo de body:
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d93",
                "descricao": "Higiene"
            }
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d93",
                "descricao": "Higiene"
            }
            ```
            
            </remarks>
            
            <response code="200">Categoria atualizada com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="404">Categoria não encontrada</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:CategoriaController.AtualizarParcial(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Atualiza parcialmente os dados de uma categoria.
            </summary>
            
            <param name="id" type="string" example="6659fbbd3fae4c001fcf6d93">ID da categoria a ser atualizada.</param>
            <param name="camposParaAtualizar">Objeto contendo os campos que devem ser atualizados.</param>
            
            <remarks>
            
            ## Atualização Parcial de Categoria
            
            Use este endpoint quando quiser atualizar apenas **alguns campos** da categoria.
            
            ⚠️ Não é permitido atualizar o campo **id**.
            
            ### Campo que pode ser atualizado:
            - **descricao** (string)
            
            ### Requisição via rota:
            ```http
            PATCH http://localhost:3001/api/Categoria/AtualizarParcial/{id}
            ```
            ```http
            Content-Type: application/json
            ```
            
            ### Exemplo de body:
            ```json
            {
                "descricao": "Higiene Pessoal"
            }
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d93",
                "descricao": "Higiene Pessoal"
            }
            ```
            
            </remarks>
            
            <response code="200">Categoria atualizada com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="404">Categoria não encontrada</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:CategoriaController.ExcluirCategoria(System.String)">
            <summary>
                Exclui uma categoria do banco de dados.
            </summary>
            
            <param name="id" type="string" example="6659fbbd3fae4c001fcf6d93">ID da categoria a ser excluída.</param>
            
            <remarks>
            
            ## Excluir uma Categoria do banco de dados
            
            Use este endpoint para remover uma categoria permanentemente.
            ⚠️ **A exclusão é irreversível.**
            
            ### Requisição via rota:
            ```http
            DELETE http://localhost:3001/api/Categoria/ExcluirCategoria/{id}
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "message": "Categoria excluída com sucesso."
            }
            ```
            
            </remarks>
            
            <response code="200">Categoria excluída com sucesso</response>
            <response code="400">ID inválido fornecido</response>
            <response code="404">Categoria não encontrada</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:DistribuicaoController.CadastrarDistribuicao(Project.Models.Distribuicao)">
            <summary>
                Cria uma nova distribuição.
            </summary>
            
            <remarks>
            
            ## Cadastrar nova distribuição no banco de dados
            
            Use este endpoint para cadastrar uma nova distribuição no sistema.
            
            ### Requisição via rota:
            ```http
            POST http://localhost:3001/api/Distribuicao/CadastrarDistribuicao
            ```
            
            ```http
            Content-Type: application/json
            ```
            
            ### Campos que devem ser utilizados para criar uma nova distribuição:
            - **idDoacao** (string): ID da doação relacionada
            - **quantidadeDestinada** (int): Quantidade de itens destinados
            - **dataDestinada** (string - formato ISO 8601): Data em que a distribuição foi realizada
            - **idPessoaAtendida** (string): ID da pessoa atendida pela distribuição
            
            ### Campos que não devem ser enviados:
            - **id**: Gerado automaticamente pelo banco de dados
            
            ### Exemplo de body para requisição:
            ```json
            {
                "idDoacao": "665af8b13fae4c001fcf6d12",
                "quantidadeDestinada": 10,
                "dataDestinada": "2025-05-30T14:30:00",
                "idPessoaAtendida": "665af9a03fae4c001fcf6d15"
            }
            ```
            
            ### Exemplo de resposta ao cadastrar com sucesso:
            ```json
            {
                "id": "665afa483fae4c001fcf6d19",
                "idDoacao": "665af8b13fae4c001fcf6d12",
                "quantidadeDestinada": 10,
                "dataDestinada": "2025-05-30T14:30:00",
                "idPessoaAtendida": "665af9a03fae4c001fcf6d15"
            }
            ```
            
            </remarks>
            
            <response code="200">Requisição realizada com sucesso</response>
            <response code="201">Distribuição criada com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:DistribuicaoController.ConsultarTodosDistribuicao">
            <summary>
                Consultar a lista com todas as distribuições.
            </summary>
            
            <remarks>
            
            ## Consultar todos os registros de distribuições no banco de dados
            
            Use este endpoint para recuperar todas as distribuições armazenadas no banco de dados.
            
            ### Exemplo de requisição:
            ```http
            GET http://localhost:3001/api/Distribuicao/ConsultarTodasDistribuicao
            ```
            
            ```http
            Content-Type: application/json
            ```
            
            ### Campos disponíveis na resposta:
            - **id** (string): Identificador único da distribuição
            - **idDoacao** (string): ID da doação associada
            - **quantidadeDestinada** (int): Quantidade de itens destinados
            - **dataDestinada** (string - formato ISO 8601): Data da distribuição
            - **idPessoaAtendida** (string): ID da pessoa atendida
            
            ### Exemplo de resposta:
            ```json
            [
                {
                    "id": "665afa483fae4c001fcf6d19",
                    "idDoacao": "665af8b13fae4c001fcf6d12",
                    "quantidadeDestinada": 10,
                    "dataDestinada": "2025-05-30T14:30:00",
                    "idPessoaAtendida": "665af9a03fae4c001fcf6d15"
                }
            ]
            ```
            
            </remarks>
            
            <response code="200">Lista de distribuições retornada com sucesso</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:DistribuicaoController.ConsultarDistribuicaoId(System.String)">
            <summary>
                Consultar um único registro de distribuição.
            </summary>
            
            <remarks>
            
            ## Consultar uma distribuição pelo ID
            
            Use este endpoint para recuperar os dados de uma distribuição específica, informando o ID.
            
            ### Parâmetro necessário:
            - **id** (string): ID da distribuição
            
            ### Exemplo de requisição:
            ```http
            GET http://localhost:3001/api/Distribuicao/ConsultarDistribuicaoId/{id}
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "id": "665afa483fae4c001fcf6d19",
                "idDoacao": "665af8b13fae4c001fcf6d12",
                "quantidadeDestinada": 10,
                "dataDestinada": "2025-05-30T14:30:00",
                "idPessoaAtendida": "665af9a03fae4c001fcf6d15"
            }
            ```
            
            </remarks>
            
            <response code="200">Distribuição consultada com sucesso</response>
            <response code="400">ID inválido fornecido</response>
            <response code="404">Distribuição não encontrada</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:DistribuicaoController.AtualizarDistribuicao(System.String,Project.Models.Distribuicao)">
            <summary>
                Atualiza todos os dados da distribuição com base no ID.
            </summary>
            
            <remarks>
            
            ## Atualizar todas as informações de uma distribuição
            
            Use este endpoint para sobrescrever **todos os campos** de uma distribuição.
            ⚠️ Se desejar atualizar apenas alguns campos, utilize o endpoint PATCH.
            
            ### Todos os campos devem ser preenchidos:
            - Campos não enviados serão sobrescritos com valores nulos ou padrão.
            
            ### Exemplo de requisição:
            ```http
            PUT http://localhost:3001/api/Distribuicao/AtualizarDistribuicao/{id}
            ```
            
            ```http
            Content-Type: application/json
            ```
            
            ### Exemplo de body:
            ```json
            {
                "id": "665afa483fae4c001fcf6d19",
                "quantidadeDestinada": 20,
                "dataDestinada": "2025-06-01T10:00:00",
            }
            ```
            
            </remarks>
            
            <param name="id" type="string">ID da distribuição no banco de dados.</param>
            <param name="distribuicao">Objeto contendo os dados completos a serem atualizados.</param>
            
            <response code="200">Distribuição atualizada com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="401">Não autorizado</response>
            <response code="404">Distribuição não encontrada</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:DistribuicaoController.AtualizarParcial(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Atualiza parcialmente os dados de uma distribuição existente.
            </summary>
            
            <param name="id" type="string">ID da distribuição a ser atualizada.</param>
            <param name="camposParaAtualizar">Objeto contendo os campos que devem ser atualizados.</param>
            
            <remarks>
            
            ## Atualização parcial de uma distribuição
            
            Use este endpoint para atualizar **apenas alguns campos** da distribuição.
            Somente os campos enviados no body serão modificados.
            
            ⚠️ Campos que **não podem ser atualizados**:
            - **id**: O ID da distribuição não pode ser alterado.
            
            ### Exemplo de requisição:
            ```http
            PATCH http://localhost:3001/api/Distribuicao/AtualizarParcial/{id}
            ```
            
            ```http
            Content-Type: application/json
            ```
            
            ### Campos que podem ser atualizados:
            - **idDoacao** (string)
            - **quantidadeDestinada** (int)
            - **dataDestinada** (string - formato ISO 8601)
            - **idPessoaAtendida** (string)
            
            ### Exemplo de body:
            ```json
            {
                "quantidadeDestinada": 25,
                "dataDestinada": "2025-06-02T09:00:00"
            }
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "id": "665afa483fae4c001fcf6d19",
                "idDoacao": "665af8b13fae4c001fcf6d12",
                "quantidadeDestinada": 25,
                "dataDestinada": "2025-06-02T09:00:00",
                "idPessoaAtendida": "665af9a03fae4c001fcf6d15"
            }
            ```
            
            </remarks>
            
            <response code="200">Distribuição atualizada com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="404">Distribuição não encontrada</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:DistribuicaoController.ExcluirDistribuicao(System.String)">
            <summary>
                Exclui uma distribuição do banco de dados.
            </summary>
            
            <param name="id" type="string">ID da distribuição a ser excluída.</param>
            
            <remarks>
            
            ## Excluir uma distribuição do banco de dados
            
            Use este endpoint para remover permanentemente uma distribuição da base de dados.
            ⚠️ **A exclusão é irreversível.**
            
            ### Exemplo de requisição:
            ```http
            DELETE http://localhost:3001/api/Distribuicao/ExcluirDistribuicao/{id}
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "message": "Distribuição excluída com sucesso."
            }
            ```
            
            </remarks>
            
            <response code="200">Distribuição excluída com sucesso</response>
            <response code="400">ID inválido fornecido</response>
            <response code="404">Distribuição não encontrada</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:DoacaoController.CadastrarDoacao(Project.Models.Doacao)">
            <summary>
                Cria uma nova doação.
            </summary>
            
            <remarks>
            
            ## Cadastrar nova doação no banco de dados
            
            Use este endpoint para cadastrar uma nova doação no sistema.
            
            Requisição via rota:
            ```http
            POST http://localhost:3001/api/Doacao/CadastrarDoacao
            ```
            
            ```http
            Content-Type: application/json
            ```
            
            ### Campos que devem ser utilizados para criar uma nova doação:
            - **idAbrigo** (string): ID do abrigo associado (ex: "665c1e9c3fae4c001fcf6d87")
            - **descricao** (string): Descrição da doação (ex: "Cestas básicas")
            - **idCategoria** (string): ID da categoria (ex: "665c1ea83fae4c001fcf6d89")
            - **quantidade** (int): Quantidade de itens doados
            
            ### Campos que não devem ser enviados:
            - **id**: Gerado automaticamente pelo banco de dados
            
            ### Exemplo de body para requisição:
            ```json
            {
                "idAbrigo": "665c1e9c3fae4c001fcf6d87",
                "descricao": "Cestas básicas",
                "idCategoria": "665c1ea83fae4c001fcf6d89",
                "quantidade": 50
            }
            ```
            
            ### Exemplo de resposta ao cadastrar com sucesso:
            ```json
            {
                "id": "665c1f983fae4c001fcf6d88",
                "idAbrigo": "665c1e9c3fae4c001fcf6d87",
                "descricao": "Cestas básicas",
                "idCategoria": "665c1ea83fae4c001fcf6d89",
                "quantidade": 50
            }
            ```
            
            </remarks>
            
            <response code="201">Doação criada com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:DoacaoController.ConsultarTodosDoacao">
            <summary>
                Consultar a lista com todas as doações.
            </summary>
            
            <remarks>
            
            ## Consultar todos os registros de doações no banco de dados
            
            Use este endpoint para recuperar todas as doações cadastradas.
            
            ### Exemplo de requisição:
            ```http
            GET http://localhost:3001/api/Doacao/ConsultarTodosDoacao
            ```
            
            ### Campos retornados:
            - **id** (string): ID da doação
            - **idAbrigo** (string): ID do abrigo associado
            - **descricao** (string): Descrição da doação
            - **idCategoria** (string): ID da categoria
            - **quantidade** (int): Quantidade de itens doados
            
            ### Exemplo de resposta:
            ```json
            [
              {
                "id": "665c1f983fae4c001fcf6d88",
                "idAbrigo": "665c1e9c3fae4c001fcf6d87",
                "descricao": "Cestas básicas",
                "idCategoria": "665c1ea83fae4c001fcf6d89",
                "quantidade": 50
              }
            ]
            ```
            
            </remarks>
            
            <response code="200">Lista de doações retornada com sucesso</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:DoacaoController.ConsultarDoacaoId(System.String)">
            <summary>
                Consultar um único registro de doação.
            </summary>
            
            <remarks>
            
            ## Consultar uma doação pelo ID
            
            Use este endpoint para recuperar os dados de uma doação específica, informando o ID.
            
            ### Parâmetro necessário:
            - **id** (string): ID da doação
            
            ### Exemplo de requisição:
            ```http
            GET http://localhost:3001/api/Doacao/ConsultarDoacaoId/{id}
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "id": "665c1f983fae4c001fcf6d88",
                "idAbrigo": "665c1e9c3fae4c001fcf6d87",
                "descricao": "Cestas básicas",
                "idCategoria": "665c1ea83fae4c001fcf6d89",
                "quantidade": 50
            }
            ```
            
            </remarks>
            
            <response code="200">Doação consultada com sucesso</response>
            <response code="400">ID inválido fornecido</response>
            <response code="404">Doação não encontrada</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:DoacaoController.AtualizarDoacao(System.String,Project.Models.Doacao)">
            <summary>
                Atualiza todos os dados da doação com base no ID.
            </summary>
            
            <remarks>
            
            ## Atualizar todas as informações de uma doação
            
            Use este endpoint para sobrescrever **todos os campos** de uma doação.
            ⚠️ Se desejar atualizar apenas alguns campos, utilize o endpoint PATCH.
            
            ### Todos os campos devem ser preenchidos:
            - Campos não enviados serão sobrescritos com valores nulos ou padrão.
            
            ### Exemplo de requisição:
            ```http
            PUT http://localhost:3001/api/Doacao/AtualizarDoacao/{id}
            ```
            
            ```http
            Content-Type: application/json
            ```
            
            ### Exemplo de body:
            ```json
            {
                "id": "665c1f983fae4c001fcf6d88",
                "descricao": "Doação de roupas",
                "quantidade": 100
            }
            ```
            
            </remarks>
            
            <param name="id" type="string">ID da doação no banco de dados.</param>
            <param name="doacao">Objeto contendo os dados completos a serem atualizados.</param>
            
            <response code="200">Doação atualizada com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="401">Não autorizado</response>
            <response code="404">Doação não encontrada</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:DoacaoController.AtualizarParcial(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Atualiza parcialmente os dados de uma doação existente.
            </summary>
            
            <param name="id" type="string">ID da doação a ser atualizada.</param>
            <param name="camposParaAtualizar">Objeto contendo os campos que devem ser atualizados.</param>
            
            <remarks>
            
            ## Atualização parcial de uma doação
            
            Use este endpoint para atualizar **apenas alguns campos** da doação.
            Somente os campos enviados no body serão modificados.
            
            ⚠️ Campos que **não podem ser atualizados**:
            - **id**: O ID da doação não pode ser alterado.
            
            ### Exemplo de requisição:
            ```http
            PATCH http://localhost:3001/api/Doacao/AtualizarParcial/{id}
            ```
            
            ```http
            Content-Type: application/json
            ```
            
            ### Campos que podem ser atualizados:
            - **idAbrigo** (string)
            - **descricao** (string)
            - **idCategoria** (string)
            - **quantidade** (int)
            
            ### Exemplo de body:
            ```json
            {
                "descricao": "Doação de alimentos",
                "quantidade": 80
            }
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "id": "665c1f983fae4c001fcf6d88",
                "idAbrigo": "665c1e9c3fae4c001fcf6d87",
                "descricao": "Doação de alimentos",
                "idCategoria": "665c1ea83fae4c001fcf6d89",
                "quantidade": 80
            }
            ```
            
            </remarks>
            
            <response code="200">Doação atualizada com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="404">Doação não encontrada</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:DoacaoController.ExcluirDoacao(System.String)">
            <summary>
                Exclui uma doação do banco de dados.
            </summary>
            
            <param name="id" type="string">ID da doação a ser excluída.</param>
            
            <remarks>
            
            ## Excluir uma doação do banco de dados
            
            Use este endpoint para remover permanentemente uma doação da base de dados.
            ⚠️ **A exclusão é irreversível.**
            
            ### Exemplo de requisição:
            ```http
            DELETE http://localhost:3001/api/Doacao/ExcluirDoacao/{id}
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "message": "Doação excluída com sucesso."
            }
            ```
            
            </remarks>
            
            <response code="200">Doação excluída com sucesso</response>
            <response code="400">ID inválido fornecido</response>
            <response code="404">Doação não encontrada</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:EnderecoController.ConsultarCep(System.String)">
             <summary>
                 Consulta o endereço completo a partir de um CEP informado.
             </summary>
             
             <remarks>
             ## Buscar endereço via CEP
             
             Use este endpoint para consultar um endereço completo a partir do CEP fornecido.  
             A resposta será preenchida automaticamente com base na base de dados do ViaCEP.
            
             ### Parâmetro obrigatório:
             - **cep** (string): Código de Endereçamento Postal (somente números)
            
             ### Exemplo de requisição:
             ```http
             GET http://localhost:3001/api/Endereco/consultar-cep/{cep}
             ```
            
             ### Exemplo de resposta:
             ```json
             {
                 "cep": "01001-000",
                 "estado": "SP",
                 "cidade": "São Paulo",
                 "bairro": "Sé",
                 "rua": "Praça da Sé"
             }
             ```
            
             </remarks>
             <param name="cep">CEP que deseja consultar (somente números)</param>
             <response code="200">Endereço encontrado com sucesso</response>
             <response code="404">CEP não encontrado</response>
             <response code="500">Erro interno ao buscar o endereço</response>
        </member>
        <member name="M:EnderecoController.CadastrarEndereco(Project.Models.EnderecoDTO)">
             <summary>
                 Cadastra um novo endereço de preferência para o usuário.
             </summary>
             
             <remarks>
             
             ## Cadastrar novo endereço de preferência para o usuário
             
             Use este endPoint para cadastrar um endereço de peferência para o usuário. Com este endereço, o modelo de IA será capaz de buscar uma  clínica próxima do cliente.
             
             ### Campos que devem ser utilizados para criar um novo dia:
             - **idUsuario** : IdUsuario que deseja registrar o endereço
             - **cep** string : CEP de preferência e não de residência
             - **estado** string : Estado de preferência e não de residência
             - **cidade** string : Cidade de preferência e não de residência
             - **bairro** string : Bairro de preferência e não de residência
             - **rua** string : Rua de preferência e não de residência
             
             ### Campos que não devem ser utilizados para criar um novo dia:
             - **id** : Id do dia que será gerado automaticamente
            
             ### Exemplo de requisição:
             ```http
             POST http://localhost:3001/api/Endereco/CadastrarEndereco
             ```
             
             ```http
             Header: Key = Content-Type e Value = application/json
             ```
            
             ### Exemplo de body para requisição:
            
             ```json
                 {   
                     "idUsuario": "67cc95b32811515d372209ce",
                     "cep": "12345678",
                     "estado": "São Paulo",
                     "cidade": "São Paulo",
                     "bairro": "Centro",
                     "rua": "Cantori 30"
                 }
             ```
             
             ### Exemplo de resposta:
             
             ```json
                 {   
                     "id": "67cc95b32811515d37220000",
                     "idUsuario": "67cc95b32811515d372209ce",
                     "cep": "12345678",
                     "estado": "São Paulo",
                     "cidade": "São Paulo",
                     "bairro": "Centro",
                     "rua": "Cantori 30"
                 }
             ```
             
             </remarks>
             <response code="201">Endereço criado com sucesso</response>
             <response code="400">Dados inválidos</response>
             <response code="500">Erro interno</response>
        </member>
        <member name="M:EnderecoController.ConsultarTodosEndereco">
             <summary>
                 Consultar o endereço de preferência do usuário.
             </summary>
             
             <remarks>
             
             ## Consultar todos os registros de endereço do banco de dados
             
             Use este endPoint se seu objetivo é recuperar todos os registros de endereços do banco de dados
             
             ### Exemplo de requisição:
             ```http
             GET http://localhost:3001/api/Endereco/ConsultarTodosEndereco
             ```
            
             ### Campos que disponíveis na requisição:
             - **id** : Id do banco de dados, que foi gerado automaticamente.
             - **idUsuario** : IdUsuario que deseja registrar o endereço
             - **cep** string : CEP de preferência e não de residência
             - **estado** string : Estado de preferência e não de residência
             - **cidade** string : Cidade de preferência e não de residência
             - **bairro** string : Bairro de preferência e não de residência
             - **rua** string : Rua de preferência e não de residência
             
             ### Exemplo de body que virá de resposta:
             
             ```json
            [
                {
                    "id": "67cdee51b304fd2aaac177c9",
                    "idUsuario": "67cc95b32811515d372209ce",
                    "cep": "01739018",
                    "estado": "São Paulo",
                    "cidade": "São Paulo",
                    "bairro": "Vila Andrade",
                    "rua": "Cantori 30"
                },
                {
                    "id": "67cdee91b304fd2aaac177ca",
                    "idUsuario": "67cc95b32811515d372209ce",
                    "cep": "05728020",
                    "estado": "São Paulo",
                    "cidade": "São Paulo",
                    "bairro": "Teste",
                    "rua": "Teste"
                }
            ]
             ```
             </remarks>
             
             <response code="200">Endereco consultado com sucesso</response>
             <response code="400">Dados inválidos fornecidos</response>
             <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:EnderecoController.ConsultarEnderecoId(System.String)">
             <summary>
                 Consultar um único registro de preferência de endereço que o usuário cadastrou.
             </summary>
             
             <remarks>
             
             ## Consultar um único endereço de preferência registrado, sendo consultado pelo ID do banco de dados
             
             Use este endpoint quando precisar consultar somente um registro com todos campos específicos.
             
             ### Campos que devem ser utilizados para consultar um endereço de preferência:
             
             - **id**: ID do banco e não o idUsuario
            
             ### Exemplo de requisição:
             ```http
             GET http://localhost:3001/api/Endereco/ConsultarEnderecoId/{id}
             ```
              
             ```json
             "id de teste": "68379ecf2843b017d24f581c"
             ```
             
             ### Exemplo de body que receberemos como resposta:
             
             ```json
                {
                     "id": "67cdee91b304fd2aaac177ca",
                     "idUsuario": "67cc95b32811515d372209ce",
                     "cep": "05728020",
                     "estado": "São Paulo",
                     "cidade": "São Paulo",
                     "bairro": "Teste",
                     "rua": "Teste"
                 }
             ```
             </remarks>
             
             <response code="200">Dia consultado com sucesso</response>
             <response code="400">Dados inválidos fornecidos</response>
             <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:EnderecoController.AtualizarEndereco(System.String,Project.Models.EnderecoDTO)">
             <summary>
                 Atualiza o endereço completo existente do usuário, com base no ID do usuário e ID do banco de dados.
             </summary>
             
             <remarks>
             
             ## Atualizar a preferência de endereço cadastrado pelo usuário
             
             Use este endpoint se o objetivo for atualizar todos os campos do endereço no cadastro. Se for parcial, utilize outro endPoint.
             
             ### Exemplo de requisição
            
             ```http
             PUT http://localhost:3001/api/Endereco/AtualizarEndereco/{id}
             ```
             
             ```json
                 {   
                     "id": "67ce4b3d61760e36f862dd59",
                     "idUsuario": "67cc95b32811515d372209ce",
                     "cep": "05763290",
                     "estado": "SP", 
                     "cidade": "São Paulo",
                     "Bairro": "Vila Madalena",
                     "Rua": "Rua do Pão de Queijo"
                 }
             
             ``` 
             
             ### Se preencher alguns campos e outros não, estes campos serão preenchidos com dados inválidos e default criado pelo sistema.
             </remarks>
             
             
             <param name="id" type="string" example="67cc95b32811515d372209ce">ID do usuário a ser atualizado o endereço.</param>
             <param name="enderecoDTO">Dados do endereço a serem atualizados.</param>
             <response code="200">Endereço atualizado com sucesso</response>
             <response code="400">Dados inválidos</response>
             <response code="401">Endereço não autorizado</response>
             <response code="404">Endereço não encontrado</response>
             <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:EnderecoController.AtualizarClinica(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
                 Atualiza parcialmente os dados de um endereço existente
             </summary>
             
             <param name="id" type="string" example="67ce4b3d61760e36f862dd59">ID da endereço a ser atualizada</param>
             <param name="camposParaAtualizar">Campos específicos a serem atualizados</param>
             
             <remarks>
             
             ## Atualização Parcial dos dados
             
             Use este endpoint quando precisar atualizar apenas alguns campos específicos de uma tabela,
             sem a necessidade de enviar todos os dados.
             
             ### Campos que podem ser atualizados:
             - **id**: ID gerado pelo banco de dados
             - **cep**: CEP do endereço
             - **Estado**: Estado do endereço
             - **Cidade**: Cidade do endereço de preferência do usuário
             - **Bairro**: Bairro do endereço
             - **Rua**: Endereço completo com número
             
             ### Campos que não podem ser atualizados:
             - **IdUsuario**: IdUsuario que foi gerado pelo banco de dados
             
             ```http
             PATCH http://localhost:3001/api/Endereco/AtualizarParcial/{id}
             ```
            
             ### Exemplo de requisição:
             
             ```json
             {
                 "id": "67ce4b3d61760e36f862dd59",
                 "email": "novo.email@clinica.com.br"
             }
             ```
             
             Somente os campos incluídos no corpo da requisição serão atualizados.
             
             ### Exemplo de resposta da requisição:
             
             ```json
             {
                 "id": "67cdee91b304fd2aaac177ca",
                 "idUsuario": "67cc95b32811515d372209ce",
                 "cep": "05763290",
                 "estado": "São Paulo",
                 "cidade": "São Paulo",
                 "bairro": "Teste",
                 "rua": "Teste"
             }
             ```
             </remarks>
             
             <response code="200">Clinica atualizada com sucesso</response>
             <response code="400">Dados inválidos fornecidos</response>
             <response code="404">Clinica não encontrada</response>
             <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:EnderecoController.ExcluirEndereco(System.String)">
             <summary>
             Exclui um endereço do usuário.
             </summary>
             
             <remarks>
             
             ## Excluir um endereço de preferência do usuário cadastrado
             
             Use este endoPoint se seu objetivo é excluir um cadastro contendo o endereço de preferência cadastrado errado. 
             
             ### Exemplo da requisição para excluir:
            
             ```http
             DELETE http://localhost:3001/api/Endereco/ExcluirEndereco/{id}
             ```
             
             ```json
                 {
                     "id": "67cf3f8f8d3a256253f2dab5",
                 }
             ```
             
             ### Exemplo da resposta para excluir uma clínica:
             
             ```json
                 {
                     "message": "Endereço de preferência excluído com sucesso."
                 }
             ``` 
             
             Uma vez excluida da base, não tem reversão desta ação.
             
             </remarks>
             
             <param name="id" type="string" example="67cdee51b304fd2aaac177c9">ID do endereço a ser excluído.</param>
             <response code="200">Endereço excluído com sucesso</response>
             <response code="401">Usuário não autorizado</response>
             <response code="404">Endereço não encontrado</response>
             <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:FeedbackController.CadastrarFeedback(Project.Models.Feedback)">
             <summary>
                 Cria um novo Feedback.
             </summary>
             
             <remarks>
             
             ## Cadastrar novo Feedback no banco de dados
             
             Use este endpoint para cadastrar um Feedback.
             
             ### Campos que devem ser utilizados para criar um novo Feedback:
             - **Nota** string : Nota do feedback
             - **Comentario** string : Comentário do feedback
             
             ### Campos que não devem ser utilizados para criar um novo Feedback:
             - **Id** : Id do feedback que será gerado automaticamente
             
             ### Exemplo de requisição:
            
             ```http
             POST http://localhost:3001/api/Feedback/CadastrarFeedback
             ```
            
             ```http
             Header: Key = Content-Type e Value = application/json
             ```
            
             ### Exemplo de body para requisição:
             ```json
                 {
                     "Nota": "5",
                     "Comentario": "Excelente atendimento!"
                 }
             ```
             
             ### Exemplo de resposta quando o cadastro for efetuado:
             
             ```json
                 {   
                     "Id": "67cc95b32811515d37220000", // gerado pelo banco de dados
                     "Nota": "5",
                     "Comentario": "Excelente atendimento!"
                 }
             ```
             </remarks>
             
             <response code="200">Requisição realizada com sucesso</response>
             <response code="201">Feedback criado com sucesso</response>
             <response code="400">Dados inválidos fornecidos</response>
             <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:FeedbackController.ConsultarTodosFeedbacks">
             <summary>
                 Consultar a lista com todos os Feedbacks.
             </summary>
             
             <remarks>
             
             ## Consultar todos os registros de Feedbacks do banco de dados
             
             Use este endpoint se seu objetivo é recuperar todos os registros de Feedbacks do banco de dados.
             
             ```http
             GET http://localhost:3001/api/Feedback/ConsultarTodosFeedbacks
             ```
            
             ### Exemplo de body de resposta, sempre será uma lista com todos os Feedbacks no banco:
             ```json
                 [
                     { 
                         "Id": "67cc95b32811515d372209ce",
                         "Nota": "5",
                         "Comentario": "Excelente atendimento!"
                     },
                     {
                         "Id": "67cca0540924d08d2c4b7819",
                         "Nota": "4",
                         "Comentario": "Bom atendimento, mas pode melhorar."
                     }
                 ]
             ```
             </remarks>
             
             <response code="200">Requisição realizada com sucesso</response>
             <response code="400">Dados inválidos fornecidos</response>
             <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:FeedbackController.ConsultarFeedbackId(System.String)">
             <summary>
                 Consultar um único registro de Feedback.
             </summary>
             
             <remarks>
             
             ## Consultar um único Feedback no banco, sendo consultado pelo ID do banco de dados.
             
             Use este endpoint quando precisar consultar somente um registro com todos os campos específicos.
             
             ### Campo que deve ser utilizado para consultar um Feedback:
             
             - **Id**: ID do banco
            
             ```http
             GET http://localhost:3001/api/Feedback/ConsultarFeedbackId{id}
             ```
             
             ### Exemplo de body para requisição:
             
             ```json
                 {
                     "Id": "67cc95b32811515d372209ce"
                 }
             ```
             
             ### Exemplo de body que receberemos como resposta:
             
             ```json
                {
                     "Id": "67cc95b32811515d372209ce",
                     "Nota": "5",
                     "Comentario": "Excelente atendimento!"
                 }
             ```
             </remarks>
             
             <response code="200">Feedback consultado com sucesso</response>
             <response code="400">Dados inválidos fornecidos</response>
             <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:FeedbackController.AtualizarFeedback(System.String,Project.Models.Feedback)">
             <summary>
                 Atualiza os dados completos existentes do Feedback, com base no ID do banco de dados.
             </summary>
             
             <remarks>
             
             ## Atualizar todas as informações do Feedback no banco
             
             Use este endpoint se o objetivo for atualizar todos os campos do Feedback no cadastro. Se for parcial, utilize outro endpoint.
             
             ### Exemplo de requisição:
            
             ```http
             PUT http://localhost:3001/api/Feedback/AtualizarFeedback/{id}
             ```
             
             ```json
                 {   
                     "Id": "67ce4b3d61760e36f862dd59",
                     "Nota": "4",
                     "Comentario": "Bom atendimento, mas pode melhorar."
                 }
             ``` 
             
             ### Se preencher alguns campos e outros não, estes campos serão preenchidos com dados inválidos e valores padrão criados pelo sistema.
             </remarks>
             
             <param name="id" type="string" example="67cc95b32811515d372209ce">ID do Feedback no banco de dados.</param>
             <param name="feedback">Dados do Feedback a serem atualizados.</param>
             <response code="200">Feedback atualizado com sucesso</response>
             <response code="400">Dados inválidos</response>
             <response code="401">Feedback não autorizado</response>
             <response code="404">Feedback não encontrado</response>
             <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:FeedbackController.AtualizarClinica(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Atualiza parcialmente os dados de um Feedback existente.
            </summary>
            
            <param name="id" type="string" example="67cc95b32811515d372209ce">ID do Feedback a ser atualizado</param>
            
            <remarks>
            
            ## Atualização Parcial de um Feedback
            
            Use este endpoint quando precisar atualizar apenas alguns campos específicos de um Feedback,
            sem a necessidade de enviar todos os dados.
            
            ### Campos que podem ser atualizados:
            - **Nota**: Nota do feedback
            - **Comentario**: Comentário do feedback
            
            ### Campos que não podem ser atualizados:
            - **Id**: ID do feedback gerado automaticamente
            
            ```http
            PATCH http://localhost:3001/api/Feedback/AtualizarParcial/{id}
            ```
            
            ### Exemplo de requisição:
            
            ```json
            {
                "Id": "67cc95b32811515d372209ce",
                "Comentario": "Atendimento satisfatório."
            }
            ```
            
            Somente os campos incluídos no corpo da requisição serão atualizados.
            
            ### Exemplo de resposta da requisição:
            
            ```json
            {
                "Id": "67ce4b3d61760e36f862dd59",
                "Nota": "4",
                "Comentario": "Atendimento satisfatório."
            }
            ```
            </remarks>
            
            <param name="camposParaAtualizar"></param>
            
            <response code="200">Feedback atualizado com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="404">Feedback não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:FeedbackController.ExcluirUsuario(System.String)">
             <summary>
                 Excluir um Feedback do banco de dados.
             </summary>
            
             <param name="id" type="string" example="67cc95b32811515d372209ce">ID do Feedback a ser excluído</param>
             
             <remarks>
             
             ## Excluir um Feedback do banco de dados e dos cadastros.
            
             ```http
             DELETE http://localhost:3001/api/Feedback/ExcluirFeedback/{id}
             ```
             
             ### Exemplo da requisição para excluir um Feedback:
             
             ```json
                 {
                     "Id": "67cc95b32811515d372209ce"
                 }
             ```
             
             ### Exemplo da resposta para excluir um Feedback:
             
             ```json
                 {
                     "message": "Feedback excluído com sucesso."
                 }
             ``` 
             
             Uma vez excluído da base, não há reversão desta ação.
             </remarks>
             
             <response code="200">Feedback excluído com sucesso</response>
             <response code="400">Dados inválidos fornecidos</response>
             <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:RegistroEventoController.CadastrarRegistroEvento(Project.Models.RegistroEvento)">
            <summary>
                Cria um novo registro de evento.
            </summary>
            
            <remarks>
            
            ## Cadastrar novo registro de evento no banco de dados
            
            Use este endpoint para cadastrar um registro de evento no sistema.
            
            Requisição via rota:
            ```http
            POST http://localhost:3001/api/RegistroEvento/CadastrarRegistroEvento
            ```
            
            ```http
            Content-Type: application/json
            ```
            
            ### Campos que devem ser utilizados para criar um novo registro:
            - **descricao** (string): Descrição do evento
            - **dataHora** (DateTime): Data e hora do evento (local)
            - **idUsuario** (string): ID do usuário associado
            - **localizacao** (string): Local onde ocorreu o evento
            - **idAbrigo** (string): ID do abrigo associado
            
            ### Campos que não devem ser enviados:
            - **id**: Gerado automaticamente pelo banco de dados
            
            ### Exemplo de body para requisição:
            ```json
            {
                "descricao": "Reunião de voluntários",
                "dataHora": "2025-05-30T14:00:00",
                "idUsuario": "6659fbbd3fae4c001fcf6d93",
                "localizacao": "Sala 5",
                "idAbrigo": "6659fbbd3fae4c001fcf6e01"
            }
            ```
            
            ### Exemplo de resposta ao cadastrar com sucesso:
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d94",
                "descricao": "Reunião de voluntários",
                "dataHora": "2025-05-30T14:00:00",
                "idUsuario": "6659fbbd3fae4c001fcf6d93",
                "localizacao": "Sala 5",
                "idAbrigo": "6659fbbd3fae4c001fcf6e01"
            }
            ```
            
            </remarks>
            
            <response code="201">Registro de evento criado com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:RegistroEventoController.ConsultarTodosRegistroEvento">
            <summary>
                Consultar todos os registros de eventos.
            </summary>
            
            <remarks>
            
            ## Consultar todos os registros de eventos do banco de dados
            
            Use este endpoint para recuperar todos os registros de eventos armazenados no banco.
            
            Requisição via rota:
            ```http
            GET http://localhost:3001/api/RegistroEvento/ConsultarTodosRegistroEvento
            ```
            
            ### Campos disponíveis na resposta:
            - **id** (string): Identificador único do registro (gerado automaticamente)
            - **descricao** (string): Descrição do evento
            - **dataHora** (DateTime): Data e hora do evento
            - **idUsuario** (string): ID do usuário associado
            - **localizacao** (string): Local do evento
            - **idAbrigo** (string): ID do abrigo associado
            
            ### Exemplo de resposta:
            ```json
            [
                {
                    "id": "6659fbbd3fae4c001fcf6d94",
                    "descricao": "Reunião de voluntários",
                    "dataHora": "2025-05-30T14:00:00",
                    "idUsuario": "6659fbbd3fae4c001fcf6d93",
                    "localizacao": "Sala 5",
                    "idAbrigo": "6659fbbd3fae4c001fcf6e01"
                }
            ]
            ```
            
            </remarks>
            
            <response code="200">Lista de registros retornada com sucesso</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:RegistroEventoController.ConsultarRegistroEventoId(System.String)">
            <summary>
                Consultar um único registro de evento pelo ID.
            </summary>
            
            <remarks>
            
            ## Consultar registro pelo ID
            
            Use este endpoint para recuperar os dados de um registro específico, informando seu ID.
            
            Requisição via rota:
            ```http
            GET http://localhost:3001/api/RegistroEvento/ConsultarRegistroEventoId/{id}
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d94",
                "descricao": "Reunião de voluntários",
                "dataHora": "2025-05-30T14:00:00",
                "idUsuario": "6659fbbd3fae4c001fcf6d93",
                "localizacao": "Sala 5",
                "idAbrigo": "6659fbbd3fae4c001fcf6e01"
            }
            ```
            
            </remarks>
            
            <response code="200">Registro consultado com sucesso</response>
            <response code="400">ID inválido fornecido</response>
            <response code="404">Registro não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:RegistroEventoController.AtualizarRegistroEvento(System.String,Project.Models.RegistroEvento)">
            <summary>
                Atualiza todos os dados de um registro de evento com base no ID.
            </summary>
            
            <remarks>
            
            ## Atualizar todas as informações de um registro no banco de dados
            
            Use este endpoint para sobrescrever **todos os campos** do cadastro de um registro de evento.
            ⚠️ Para atualização parcial, utilize o endpoint PATCH.
            
            ### Todos os campos devem ser preenchidos:
            - Campos não enviados serão sobrescritos com valores nulos ou padrão.
            
            Requisição via rota:
            ```http
            PUT http://localhost:3001/api/RegistroEvento/AtualizarRegistroEvento/{id}
            ```
            
            ### Exemplo de requisição:
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d94",
                "descricao": "Nova descrição",
                "dataHora": "2025-06-01T10:00:00",
                "idUsuario": "6659fbbd3fae4c001fcf6d93",
                "localizacao": "Nova sala",
                "idAbrigo": "6659fbbd3fae4c001fcf6e01"
            }
            ```
            
            </remarks>
            
            <response code="200">Registro atualizado com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="401">Não autorizado</response>
            <response code="404">Registro não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:RegistroEventoController.AtualizarParcial(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Atualiza parcialmente os dados de um registro de evento existente.
            </summary>
            
            <param name="id" type="string" example="6659fbbd3fae4c001fcf6d94">ID do registro a ser atualizado.</param>
            <param name="camposParaAtualizar">Objeto contendo os campos que devem ser atualizados.</param>
            
            <remarks>
            
            ## Atualização Parcial de um Registro de Evento
            
            Use este endpoint para atualizar apenas alguns campos, sem enviar todos os dados.
            Somente os campos incluídos na requisição serão modificados.
            
            ⚠️ Campos que **não podem ser atualizados**:
            - **id**
            
            ### Exemplo de requisição:
            ```http
            PATCH http://localhost:3001/api/RegistroEvento/AtualizarParcial/{id}
            ```
            
            ### Campos que podem ser atualizados:
            - **descricao**
            - **dataHora**
            - **idUsuario**
            - **localizacao**
            - **idAbrigo**
            
            ### Exemplo de body:
            ```json
            {
                "descricao": "Descrição atualizada",
                "localizacao": "Auditório"
            }
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d94",
                "descricao": "Descrição atualizada",
                "dataHora": "2025-05-30T14:00:00",
                "idUsuario": "6659fbbd3fae4c001fcf6d93",
                "localizacao": "Auditório",
                "idAbrigo": "6659fbbd3fae4c001fcf6e01"
            }
            ```
            
            </remarks>
            
            <response code="200">Registro atualizado com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="404">Registro não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:RegistroEventoController.ExcluirRegistroEvento(System.String)">
            <summary>
                Exclui um registro de evento do banco de dados.
            </summary>
            
            <param name="id" type="string" example="6659fbbd3fae4c001fcf6d94">ID do registro a ser excluído.</param>
            
            <remarks>
            
            ## Excluir um registro do banco de dados
            
            Use este endpoint para remover permanentemente um registro.
            ⚠️ Exclusão é irreversível.
            
            Requisição via rota:
            ```http
            DELETE http://localhost:3001/api/RegistroEvento/ExcluirRegistroEvento/{id}
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "message": "Registro excluído com sucesso."
            }
            ```
            
            </remarks>
            
            <response code="200">Registro excluído com sucesso</response>
            <response code="400">ID inválido fornecido</response>
            <response code="404">Registro não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:TipoUsuarioController.CadastrarTipoUsuario(Project.Models.TipoUsuario)">
            <summary>
                Cria um novo tipo de usuário.
            </summary>
            
            <remarks>
            
            ## Cadastrar novo tipo de usuário no banco de dados
            
            Use este endpoint para cadastrar um tipo de usuário no sistema. O tipo de usuário define o perfil e permissões do tipo de usuário dentro da plataforma.
            
            Requisição via rota:
            ```http
            POST http://localhost:3001/api/TipoUsuario/CadastrarTipoUsuario
            ```
            
            ```http
            Content-Type: application/json
            ```
            
            ### Campos que devem ser utilizados para criar um novo tipo de usuário:
            - **descricao** (string): Descrição do tipo de usuário (Ex: "Comum", "Administrador", etc.)
            
            ### Campos que não devem ser enviados:
            - **id**: Gerado automaticamente pelo banco de dados
            
            ### Exemplo de body para requisição:
            ```json
            {
                "descricao": "Comum"
            }
            ```
            
            ### Exemplo de resposta ao cadastrar com sucesso:
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d93",
                "descricao": "Comum"
            }
            ```
            
            </remarks>
            
            <response code="200">Requisição realizada com sucesso</response>
            <response code="201">Tipo de usuário criado com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:TipoUsuarioController.ConsultarTodosTiposUsuario">
            <summary>
                Consultar a lista com todos os tipos de tipo de usuários.
            </summary>
            
            <remarks>
            
            ## Consultar todos os registros de tipos de tipo de usuários do banco de dados
            
            Use este endpoint para recuperar todos os tipos de tipo de usuários armazenados no banco de dados. O tipo de usuário define o perfil e as permissões dos tipo de usuários dentro da plataforma.
            
            ### Exemplo de requisição:
            
            Requisição via rota:
            ```http
            GET http://localhost:3001/api/TipoUsuario/ConsultarTodosTiposUsuario
            ```
            ```http
            Content-Type: application/json
            ```
            
            ### Campos disponíveis na resposta:
            - **id** (string): Identificador único do tipo de usuário (gerado automaticamente pelo banco)
            - **descricao** (string): Descrição do tipo de usuário (Ex: "Comum", "Administrador", etc.)
            
            ### Exemplo de resposta:
            ```json
            [
                {
                    "id": "6659fbbd3fae4c001fcf6d93",
                    "descricao": "Comum"
                },
                {
                    "id": "6659fbbd3fae4c001fcf6e01",
                    "descricao": "Administrador"
                }
            ]
            ```
            
            </remarks>
            
            <response code="200">Lista de tipos de tipo de usuários retornada com sucesso</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:TipoUsuarioController.ConsultarTipoUsuarioId(System.String)">
            <summary>
                Consultar um único registro de tipo de usuário.
            </summary>
            
            <remarks>
            
            ## Consultar um único tipo de usuário pelo ID
            
            Use este endpoint quando precisar recuperar os dados de um tipo de usuário específico, informando o ID armazenado no banco de dados.
            
            ### Parâmetro necessário:
            - **id** (string): ID do tipo de usuário (gerado automaticamente pelo MongoDB)
            
            ### Exemplo de requisição:
            
            Requisição via rota:
            ```http
            GET http://localhost:3001/api/TipoUsuario/ConsultarTipoUsuarioId/{id}
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d93",
                "descricao": "Comum"
            }
            ```
            
            </remarks>
            
            <response code="200">Tipo de usuário consultado com sucesso</response>
            <response code="400">ID inválido fornecido</response>
            <response code="404">Tipo de usuário não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:TipoUsuarioController.AtualizarTipoUsuario(System.String,Project.Models.TipoUsuario)">
            <summary>
                Atualiza todos os dados do tipo de usuário com base no ID.
            </summary>
            
            <remarks>
            
            ## Atualizar todas as informações de um tipo de usuário no banco de dados
            
            Use este endpoint para sobrescrever **todos os campos** do cadastro de um tipo de usuário.
            ⚠️ Se for necessário atualizar apenas alguns campos, utilize o endpoint de **atualização parcial (PATCH)**.
            
            ### Todos os campos devem ser preenchidos:
            - Campos não enviados serão sobrescritos com valores nulos ou padrão.
            
            ### Exemplo de requisição:
            
            Requisição via rota:
            ```http
            PUT http://localhost:3001/api/TipoUsuario/AtualizarTipoUsuario/{id}
            ```
            ```http
            Content-Type: application/json
            ```
            
            ### Exemplo de requisição para atualizar os dados:
            
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d93",
                "descricao": "Administrador"
            }
            ```
            
            </remarks>
            
            <param name="id" type="string" example="6659fbbd3fae4c001fcf6d93">ID do tipo de usuário no banco de dados.</param>
            <param name="tipoUsuario">Objeto contendo os dados completos a serem atualizados.</param>
            
            <response code="200">Tipo de usuário atualizado com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="401">Não autorizado</response>
            <response code="404">Tipo de usuário não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:TipoUsuarioController.AtualizarParcial(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Atualiza parcialmente os dados de um tipo de usuário existente.
            </summary>
            
            <param name="id" type="string" example="6659fbbd3fae4c001fcf6d93">ID do tipo de usuário a ser atualizado.</param>
            <param name="camposParaAtualizar">Objeto contendo os campos que devem ser atualizados.</param>
            
            <remarks>
            
            ## Atualização Parcial de um Tipo de Tipo de Usuário
            
            Use este endpoint quando for necessário atualizar apenas **alguns campos** do tipo de usuário,
            sem a necessidade de enviar todos os dados já cadastrados.
            Somente os campos incluídos no corpo da requisição serão modificados.
            
            ⚠️ Campos que **não podem ser atualizados** por este endpoint:
            - **id**: O ID do tipo de usuário não pode ser alterado.
            
            ### Exemplo de requisição:
            
            Requisição via rota:
            ```http
            PATCH http://localhost:3001/api/TipoUsuario/AtualizarParcial/{id}
            ```
            ```http
            Content-Type: application/json
            ```
            
            ### Campos que podem ser atualizados:
            - **descricao** (string): Descrição do tipo de usuário (Ex: "Administrador", "Comum")
            
            ### Exemplo de requisição:
            ```json
            {
                "descricao": "Administrador"
            }
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d93",
                "descricao": "Administrador"
            }
            ```
            
            </remarks>
            
            <response code="200">Tipo de usuário atualizado com sucesso</response>
            <response code="400">Dados inválidos fornecidos</response>
            <response code="404">Tipo de usuário não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:TipoUsuarioController.ExcluirTipoUsuario(System.String)">
            <summary>
                Exclui um tipo de usuário do banco de dados.
            </summary>
            
            <param name="id" type="string" example="6659fbbd3fae4c001fcf6d93">ID do tipo de usuário a ser excluído.</param>
            
            <remarks>
            
            ## Excluir um Tipo de Tipo de Usuário do banco de dados
            
            Use este endpoint para remover permanentemente um tipo de usuário da base de dados.
            ⚠️ **A exclusão é irreversível.**
            
            ### Exemplo de requisição:
            ```http
            DELETE http://localhost:3001/api/TipoUsuario/ExcluirTipoUsuario/{id}
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "message": "Tipo de usuário excluído com sucesso."
            }
            ```
            
            </remarks>
            
            <response code="200">Tipo de usuário excluído com sucesso</response>
            <response code="400">ID inválido fornecido</response>
            <response code="404">Tipo de usuário não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:UsuarioController.CadastrarUsuario(Project.Models.Usuario)">
             <summary>
                 Cria um novo usuário.
             </summary>
             
             <remarks>
             
             ## Cadastrar novo usuário no banco de dados
             
             Use este endpoint para cadastrar um usuário. Somente usuários cadastrados podem efetuar login na plataforma.
             
             Requisição via rota:
             ```http
             POST http://localhost:3001/api/Usuario/CadastrarUsuario
             ```
            
             ```http
             Content-Type: application/json
             ```
            
             ### Campos que devem ser utilizados para criar um novo usuário:
             - **nome** (string): Nome completo do usuário
             - **email** (string): Email principal de contato
             - **senha** (string): Senha de acesso (deve ser armazenada com hash)
             - **idTipoUsuario** (string): Tipo de usuário (Ex: "Comum", "Administrador", etc.)
             - **telefone** (string): Telefone para contato
             - **idEndereco** (string): ID de referência do endereço (relacionamento com outra coleção)
             - **dataNascimento** (string): Data de nascimento no formato ISO (Ex: "1990-05-28")
             - **documento** (string): Documento oficial como CPF ou RG
             - **status** (string): Status da conta (Ex: "Ativo", "Inativo")
             
             ### Campos que não devem ser enviados:
             - **id**: Gerado automaticamente pelo banco de dados
             
             ### Exemplo de body para requisição:
             ```json
             {
                 "nome": "João da Silva",
                 "email": "joao@exemplo.com",
                 "senha": "senhaSegura123",
                 "idTipoUsuario": "Comum",
                 "telefone": "11999998888",
                 "idEndereco": "6659d12f3fae4c001fcf6d92",
                 "dataNascimento": "1990-05-28",
                 "documento": "12345678910",
                 "status": "Ativo"
             }
             ```
             
             ### Exemplo de resposta ao cadastrar com sucesso:
             ```json
             {
                 "id": "6659fbbd3fae4c001fcf6d93",
                 "nome": "João da Silva",
                 "email": "joao@exemplo.com",
                 "senha": "senhaHash",
                 "idTipoUsuario": "Comum",
                 "telefone": "11999998888",
                 "idEndereco": "6659d12f3fae4c001fcf6d92",
                 "dataNascimento": "1990-05-28",
                 "documento": "12345678910",
                 "status": "Ativo"
             }
             ```
             
             </remarks>
             
             <response code="200">Requisição realizada com sucesso</response>
             <response code="201">Usuário criado com sucesso</response>
             <response code="400">Dados inválidos fornecidos</response>
             <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:UsuarioController.ConsultarTodosUsuarios">
             <summary>
                 Consultar a lista com todos os usuários.
             </summary>
             
             <remarks>
             
             ## Consultar todos os registros de usuários do banco de dados
             
             Use este endpoint se o seu objetivo é recuperar todos os registros de usuários armazenados no banco de dados.
             
             ### Exemplo de requisição:
             
             Requisição via rota:
             ```http
             GET http://localhost:3001/api/Usuario/ConsultarTodosUsuarios
             ```
             ```http
             Content-Type: application/json
             ```
            
             ### Campos disponíveis na resposta:
             - **id** (string): Identificador único do usuário (gerado automaticamente pelo banco)
             - **nome** (string): Nome completo do usuário
             - **email** (string): Email principal de contato
             - **senha** (string): Senha de acesso (deverá estar armazenada com hash)
             - **idTipoUsuario** (string): Tipo de usuário (Ex: "Comum", "Administrador", etc.)
             - **telefone** (string): Telefone de contato
             - **idEndereco** (string): ID de referência ao endereço do usuário
             - **dataNascimento** (string): Data de nascimento no formato ISO (Ex: "1990-05-28")
             - **documento** (string): Documento oficial como CPF ou RG
             - **status** (string): Status da conta do usuário (Ex: "Ativo", "Inativo")
             
             ### Exemplo de resposta:
             ```json
             [
                 {
                     "id": "6659fbbd3fae4c001fcf6d93",
                     "nome": "João da Silva",
                     "email": "joao@exemplo.com",
                     "senha": "senhaHash",
                     "idTipoUsuario": "Comum",
                     "telefone": "11999998888",
                     "idEndereco": "6659d12f3fae4c001fcf6d92",
                     "dataNascimento": "1990-05-28",
                     "documento": "12345678910",
                     "status": "Ativo"
                 },
                 {
                     "id": "6659fbbd3fae4c001fcf6e00",
                     "nome": "Maria Oliveira",
                     "email": "maria@exemplo.com",
                     "senha": "outraSenhaHash",
                     "idTipoUsuario": "Administrador",
                     "telefone": "11988887777",
                     "idEndereco": "6659d13a3fae4c001fcf6d95",
                     "dataNascimento": "1985-11-12",
                     "documento": "98765432100",
                     "status": "Ativo"
                 }
             ]
             ```
             
             </remarks>
             
             <response code="200">Lista de usuários retornada com sucesso</response>
             <response code="400">Requisição malformada</response>
             <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:UsuarioController.ConsultarUsuarioId(System.String)">
            <summary>
                Consultar um único registro de usuário.
            </summary>
            
            <remarks>
            
            ## Consultar um único usuário pelo ID
            
            Use este endpoint quando precisar recuperar todos os dados de um usuário específico, informando o ID armazenado no banco de dados.
            
            ### Parâmetro necessário:
            - **id** (string): ID do usuário (gerado automaticamente pelo MongoDB)
            
            ### Exemplo de requisição:
            
            Requisição via rota:
            ```http
            GET http://localhost:3001/api/Usuario/ConsultarUsuarioId/{id}
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "id": "6659fbbd3fae4c001fcf6d93",
                "nome": "João da Silva",
                "email": "joao@exemplo.com",
                "senha": "senhaHash",
                "idTipoUsuario": "Comum",
                "telefone": "11999998888",
                "idEndereco": "6659d12f3fae4c001fcf6d92",
                "dataNascimento": "1990-05-28",
                "documento": "12345678910",
                "status": "Ativo"
            }
            ```
            
            </remarks>
            
            <response code="200">Usuário consultado com sucesso</response>
            <response code="400">ID inválido fornecido</response>
            <response code="404">Usuário não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:UsuarioController.AtualizarUsuario(System.String,Project.Models.Usuario)">
             <summary>
                 Atualiza todos os dados do usuário com base no ID.
             </summary>
             
             <remarks>
             
             ## Atualizar todas as informações de um usuário no banco de dados
             
             Use este endpoint para sobrescrever **todos os campos** do cadastro de um usuário.  
             ⚠️ Se for necessário atualizar apenas alguns campos, utilize o endpoint de **atualização parcial (PATCH)**.
            
             ### Todos os campos devem ser preenchidos:
             - Campos não enviados serão sobrescritos com valores nulos ou padrão.
             
             ### Exemplo de requisição:
             
             Requisição via rota:
             ```http
             PUT http://localhost:3001/api/Usuario/AtualizarUsuario/{id}
             ```
             ```http
             Content-Type: application/json
             ```
             ### Exemplo de requisição para atualizar os dados:
            
             ```json
             {
                 "id": "6659fbbd3fae4c001fcf6d93",
                 "descricao": "Adm",
             }
             ```
             
             </remarks>
             
             <param name="id" type="string" example="6659fbbd3fae4c001fcf6d93">ID do usuário no banco de dados.</param>
             <param name="usuario">Objeto contendo os dados completos a serem atualizados.</param>
             
             <response code="200">Usuário atualizado com sucesso</response>
             <response code="400">Dados inválidos fornecidos</response>
             <response code="401">Não autorizado</response>
             <response code="404">Usuário não encontrado</response>
             <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:UsuarioController.AtualizarParcial(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
                 Atualiza parcialmente os dados de um usuário existente.
             </summary>
             
             <param name="id" type="string" example="6659fbbd3fae4c001fcf6d93">ID do usuário a ser atualizado.</param>
             <param name="camposParaAtualizar">Objeto contendo os campos que devem ser atualizados.</param>
             
             <remarks>
             
             ## Atualização Parcial de um Usuário
             
             Use este endpoint quando for necessário atualizar apenas **alguns campos** do usuário,
             sem a necessidade de enviar todas as informações já cadastradas.
             Somente os campos incluídos no corpo da requisição serão modificados.
            
             ### Exemplo de requisição:
             
             Requisição via rota:
             ```http
             PATCH http://localhost:3001/api/Usuario/AtualizarParcial/{id}
             ```
             ```http
             Content-Type: application/json
             ```
             ### Campos que podem ser atualizados:
             - **nome** (string): Nome do usuário
             - **email** (string): Email de contato
             - **senha** (string): Nova senha (deve ser criptografada)
             - **telefone** (string): Número de telefone
             - **idEndereco** (string): ID de endereço
             - **dataNascimento** (string): Data de nascimento no formato ISO
             - **documento** (string): Documento como CPF/RG
             - **status** (string): Status da conta (ex: "Ativo", "Inativo")
            
             ⚠️ Campos que **não podem ser atualizados** por este endpoint:
             - **idTipoUsuario**: O tipo de usuário é definido no momento do cadastro e não pode ser alterado aqui.
            
             ### Exemplo de requisição:
             ```json
             {
                 "IdUsuario": "68378e923f38476b3138e927",
                 "telefone": "11999998888"
             }
             ```
             
             ### Exemplo de resposta:
             ```json
             {
                 "id": "68378e923f38476b3138e927",
                 "nome": "João da Silva",
                 "email": "novo.email@delfos.com.br",
                 "senha": "senhaHash",
                 "idTipoUsuario": "Comum",
                 "telefone": "11999998888",
                 "idEndereco": "6659d12f3fae4c001fcf6d92",
                 "dataNascimento": "1990-05-28",
                 "documento": "12345678910",
                 "status": "Ativo"
             }
             ```
             
             </remarks>
             
             <response code="200">Usuário atualizado com sucesso</response>
             <response code="400">Dados inválidos fornecidos</response>
             <response code="404">Usuário não encontrado</response>
             <response code="500">Erro interno do servidor</response>
        </member>
        <member name="M:UsuarioController.ExcluirUsuario(System.String)">
            <summary>
                Exclui um usuário do banco de dados.
            </summary>
            
            <param name="id" type="string" example="6659fbbd3fae4c001fcf6d93">ID do usuário a ser excluído.</param>
            
            <remarks>
            
            ## Excluir um usuário do banco de dados
            
            Use este endpoint para remover permanentemente um usuário da base de dados.
            ⚠️ **A exclusão é irreversível.**
            
            ### Exemplo de requisição:
            ```http
            DELETE http://localhost:3001/api/Usuario/ExcluirUsuario/{id}
            ```
            
            ### Exemplo de resposta:
            ```json
            {
                "message": "Usuário excluído com sucesso."
            }
            ```
            
            </remarks>
            
            <response code="200">Usuário excluído com sucesso</response>
            <response code="400">ID inválido fornecido</response>
            <response code="404">Usuário não encontrado</response>
            <response code="500">Erro interno do servidor</response>
        </member>
    </members>
</doc>
