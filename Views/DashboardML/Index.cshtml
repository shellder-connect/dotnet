@{
    ViewData["Title"] = "Previsão de recursos - Matéria de IOT";
    var predicoesDataJson = ViewBag.PredicoesData?.ToString() ?? "{}";
    var totalRegioes = ViewBag.TotalRegioes ?? 0;
}

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">@ViewData["Title"]</h2>
        <div>
            <button type="button" class="btn btn-outline-primary me-2" onclick="atualizarPredicoes()">
                <i class="fas fa-sync-alt"></i> Atualizar Predições
            </button>
            <button type="button" class="btn btn-success me-2" onclick="treinarModelo()">
                <i class="fas fa-brain"></i> Treinar Modelo
            </button>
            <form method="POST" action="@Url.Action("ExportarRelatorioML")" class="d-inline">
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-info">
                    <i class="fas fa-download"></i> Exportar Relatório
                </button>
            </form>
        </div>
    </div>

    <!-- Cards de Resumo -->
    <div class="row mb-4">
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h5 class="card-title mb-1 text-white">Regiões</h5>
                            <h3 class="mb-0 text-white" id="totalRegioes">@totalRegioes</h3>
                        </div>
                        <div class="ms-3">
                            <i class="fas fa-map-marked-alt fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h5 class="card-title mb-1 text-white">Alertas Críticos</h5>
                            <h3 class="mb-0 text-white" id="alertasCriticos">-</h3>
                        </div>
                        <div class="ms-3">
                            <i class="fas fa-exclamation-triangle fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h5 class="card-title mb-1 text-white">Precisão do Modelo</h5>
                            <h3 class="mb-0 text-white" id="precisaoModelo">-</h3>
                        </div>
                        <div class="ms-3">
                            <i class="fas fa-bullseye fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h5 class="card-title mb-1 text-white">Último Treinamento</h5>
                            <h3 class="mb-0 text-white" id="ultimoTreinamento">-</h3>
                        </div>
                        <div class="ms-3">
                            <i class="fas fa-clock fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Mapa e Gráficos -->
    <div class="row mb-4">
        <div class="col-lg-8 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0 text-white">
                        <i class="fas fa-map me-2 text-white"></i>
                        Mapa de Necessidades por Região
                    </h5>
                </div>
                <div class="card-body">
                    <div id="mapaRegioes" style="height: 400px; border-radius: 8px;"></div>
                </div>
            </div>
        </div>
        <div class="col-lg-4 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0 text-white">
                        <i class="fas fa-chart-pie me-2 text-white"></i>
                        Distribuição de Necessidades
                    </h5>
                </div>
                <div class="card-body">
                    <canvas id="graficoDistribuicao" width="400" height="400"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Gráficos de Tendência -->
    <div class="row mb-4">
        <div class="col-lg-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0 text-white">
                        <i class="fas fa-chart-line me-2 text-white"></i>
                        Predições dos Próximos 7 Dias
                    </h5>
                </div>
                <div class="card-body">
                    <canvas id="graficoTendencia" width="400" height="200"></canvas>
                </div>
            </div>
        </div>
        <div class="col-lg-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0 text-white">
                        <i class="fas fa-chart-bar me-2 text-white"></i>
                        Comparativo por Categoria
                    </h5>
                </div>
                <div class="card-body">
                    <canvas id="graficoCategorias" width="400" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Tabela de Regiões Críticas -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="card-title mb-0 text-white">
                <i class="fas fa-exclamation-circle me-2 text-white"></i>
                Regiões que Precisam de Apoio Urgente
            </h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover" id="tabelaRegioesCriticas">
                    <thead class="table-dark">
                        <tr>
                            <th>Região</th>
                            <th>Nível de Urgência</th>
                            <th>Alimentos Necessários</th>
                            <th>Medicamentos</th>
                            <th>Cobertores</th>
                            <th>Eventos Previstos</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Dados serão inseridos via JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Tabela de Todas as Predições -->
    <div class="card">
        <div class="card-header">
            <h5 class="card-title mb-0 text-white">
                <i class="fas fa-table me-2 text-white"></i>
                Predições Detalhadas por Região
            </h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover" id="tabelaPredicoes">
                    <thead class="table-dark">
                        <tr>
                            <th>Região</th>
                            <th>Capacidade Abrigo</th>
                            <th>Ocupação Atual</th>
                            <th>Taxa Ocupação</th>
                            <th>Alimentos</th>
                            <th>Medicamentos</th>
                            <th>Cobertores</th>
                            <th>Confiança</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Dados serão inseridos via JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    @if (TempData["Message"] != null)
    {
        <div class="alert alert-@(TempData["MessageType"] ?? "info") mt-3">
            @TempData["Message"]
        </div>
    }
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    
    <script>
        let predicoesData = @Html.Raw(predicoesDataJson);
        let graficoDistribuicao, graficoTendencia, graficoCategorias;
        let mapa;

        document.addEventListener('DOMContentLoaded', function() {
            inicializarMapa();
            inicializarGraficos();
            atualizarCards();
            preencherTabelas();
        });

        function inicializarMapa() {
            // Inicializar mapa do Brasil
            mapa = L.map('mapaRegioes').setView([-15.7942, -47.8822], 4);
            
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(mapa);

            // Coordenadas das principais cidades
            const coordenadas = {
                'São Paulo': [-23.5505, -46.6333],
                'Rio de Janeiro': [-22.9068, -43.1729],
                'Belo Horizonte': [-19.9191, -43.9378],
                'Salvador': [-12.9714, -38.5014],
                'Curitiba': [-25.4284, -49.2733]
            };

            // Adicionar marcadores com base nas predições
            if (predicoesData.predicoes) {
                predicoesData.predicoes.forEach(predicao => {
                    const coords = coordenadas[predicao.localizacao];
                    if (coords) {
                        const urgencia = calcularUrgencia(predicao);
                        const cor = urgencia === 'Alta' ? 'red' : urgencia === 'Média' ? 'orange' : 'green';
                        
                        const marker = L.circleMarker(coords, {
                            color: cor,
                            fillColor: cor,
                            fillOpacity: 0.7,
                            radius: Math.max(8, predicao.alimentosPrevistos / 10)
                        }).addTo(mapa);

                        marker.bindPopup(`
                            <div class="popup-content">
                                <h6><strong>${predicao.localizacao}</strong></h6>
                                <p><strong>Urgência:</strong> <span class="badge bg-${urgencia === 'Alta' ? 'danger' : urgencia === 'Média' ? 'warning' : 'success'}">${urgencia}</span></p>
                                <p><strong>Alimentos:</strong> ${predicao.alimentosPrevistos}</p>
                                <p><strong>Medicamentos:</strong> ${predicao.medicamentosPrevistos}</p>
                                <p><strong>Cobertores:</strong> ${predicao.cobertoresPrevistos}</p>
                            </div>
                        `);
                    }
                });
            }
        }

        function inicializarGraficos() {
            // Gráfico de Distribuição
            const ctxDistribuicao = document.getElementById('graficoDistribuicao').getContext('2d');
            graficoDistribuicao = new Chart(ctxDistribuicao, {
                type: 'doughnut',
                data: {
                    labels: ['Alimentos', 'Medicamentos', 'Cobertores'],
                    datasets: [{
                        data: calcularTotaisPorCategoria(),
                        backgroundColor: ['#28a745', '#17a2b8', '#ffc107'],
                        borderColor: ['#1e7e34', '#138496', '#d39e00'],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });

            // Gráfico de Tendência
            const ctxTendencia = document.getElementById('graficoTendencia').getContext('2d');
            graficoTendencia = new Chart(ctxTendencia, {
                type: 'line',
                data: {
                    labels: gerarProximos7Dias(),
                    datasets: [
                        {
                            label: 'Alimentos',
                            data: simularTendencia('alimentos'),
                            borderColor: '#28a745',
                            backgroundColor: 'rgba(40, 167, 69, 0.1)',
                            borderWidth: 3,
                            fill: false,
                            tension: 0.4
                        },
                        {
                            label: 'Medicamentos',
                            data: simularTendencia('medicamentos'),
                            borderColor: '#17a2b8',
                            backgroundColor: 'rgba(23, 162, 184, 0.1)',
                            borderWidth: 3,
                            fill: false,
                            tension: 0.4
                        },
                        {
                            label: 'Cobertores',
                            data: simularTendencia('cobertores'),
                            borderColor: '#ffc107',
                            backgroundColor: 'rgba(255, 193, 7, 0.1)',
                            borderWidth: 3,
                            fill: false,
                            tension: 0.4
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            // Gráfico de Categorias por Região
            const ctxCategorias = document.getElementById('graficoCategorias').getContext('2d');
            graficoCategorias = new Chart(ctxCategorias, {
                type: 'bar',
                data: {
                    labels: predicoesData.predicoes?.map(p => p.localizacao) || [],
                    datasets: [
                        {
                            label: 'Alimentos',
                            data: predicoesData.predicoes?.map(p => p.alimentosPrevistos) || [],
                            backgroundColor: '#28a745',
                            borderColor: '#1e7e34',
                            borderWidth: 1
                        },
                        {
                            label: 'Medicamentos',
                            data: predicoesData.predicoes?.map(p => p.medicamentosPrevistos) || [],
                            backgroundColor: '#17a2b8',
                            borderColor: '#138496',
                            borderWidth: 1
                        },
                        {
                            label: 'Cobertores',
                            data: predicoesData.predicoes?.map(p => p.cobertoresPrevistos) || [],
                            backgroundColor: '#ffc107',
                            borderColor: '#d39e00',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function atualizarCards() {
            if (predicoesData.predicoes) {
                // Contar alertas críticos
                const criticos = predicoesData.predicoes.filter(p => calcularUrgencia(p) === 'Alta').length;
                document.getElementById('alertasCriticos').textContent = criticos;

                // Simular precisão do modelo
                document.getElementById('precisaoModelo').textContent = '94.2%';
                
                // Último treinamento
                document.getElementById('ultimoTreinamento').textContent = 'Hoje';
            }
        }

        function preencherTabelas() {
            // Tabela de Regiões Críticas
            const tbodyRegioesCriticas = document.querySelector('#tabelaRegioesCriticas tbody');
            tbodyRegioesCriticas.innerHTML = '';

            // Tabela de Todas as Predições
            const tbodyPredicoes = document.querySelector('#tabelaPredicoes tbody');
            tbodyPredicoes.innerHTML = '';

            if (predicoesData.predicoes && predicoesData.predicoes.length > 0) {
                predicoesData.predicoes.forEach(predicao => {
                    const urgencia = calcularUrgencia(predicao);
                    const urgenciaClass = urgencia === 'Alta' ? 'danger' : urgencia === 'Média' ? 'warning' : 'success';
                    
                    // Adicionar à tabela de críticas se urgência alta
                    if (urgencia === 'Alta') {
                        const trCritica = document.createElement('tr');
                        trCritica.innerHTML = `
                            <td><strong>${predicao.localizacao}</strong></td>
                            <td><span class="badge bg-${urgenciaClass}">${urgencia}</span></td>
                            <td><span class="text-success"><strong>${predicao.alimentosPrevistos}</strong></span></td>
                            <td><span class="text-info"><strong>${predicao.medicamentosPrevistos}</strong></span></td>
                            <td><span class="text-warning"><strong>${predicao.cobertoresPrevistos}</strong></span></td>
                            <td>${Math.floor(Math.random() * 10) + 1}</td>
                            <td>
                                <button class="btn btn-sm btn-primary" onclick="criarAlerta('${predicao.localizacao}')">
                                    <i class="fas fa-bell"></i> Alertar
                                </button>
                            </td>
                        `;
                        tbodyRegioesCriticas.appendChild(trCritica);
                    }

                    // Adicionar à tabela geral
                    const tr = document.createElement('tr');
                    const confianca = Math.floor(Math.random() * 30) + 70; // 70-100%
                    const ocupacao = Math.floor(Math.random() * 100);
                    const capacidade = ocupacao + Math.floor(Math.random() * 100) + 50;
                    const taxaOcupacao = Math.round((ocupacao / capacidade) * 100);
                    
                    tr.innerHTML = `
                        <td><strong>${predicao.localizacao}</strong></td>
                        <td>${capacidade}</td>
                        <td>${ocupacao}</td>
                        <td><span class="badge bg-${taxaOcupacao > 80 ? 'danger' : taxaOcupacao > 60 ? 'warning' : 'success'}">${taxaOcupacao}%</span></td>
                        <td><span class="text-success">${predicao.alimentosPrevistos}</span></td>
                        <td><span class="text-info">${predicao.medicamentosPrevistos}</span></td>
                        <td><span class="text-warning">${predicao.cobertoresPrevistos}</span></td>
                        <td><span class="badge bg-${confianca > 85 ? 'success' : confianca > 70 ? 'warning' : 'danger'}">${confianca}%</span></td>
                        <td><span class="badge bg-${urgenciaClass}">${urgencia}</span></td>
                    `;
                    tbodyPredicoes.appendChild(tr);
                });
            } else {
                tbodyRegioesCriticas.innerHTML = '<tr><td colspan="7" class="text-center">Nenhuma região crítica encontrada</td></tr>';
                tbodyPredicoes.innerHTML = '<tr><td colspan="9" class="text-center">Nenhuma predição disponível</td></tr>';
            }
        }

        // Funções auxiliares
        function calcularUrgencia(predicao) {
            const total = predicao.alimentosPrevistos + predicao.medicamentosPrevistos + predicao.cobertoresPrevistos;
            if (total > 100) return 'Alta';
            if (total > 50) return 'Média';
            return 'Baixa';
        }

        function calcularTotaisPorCategoria() {
            if (!predicoesData.predicoes) return [0, 0, 0];
            
            const totais = predicoesData.predicoes.reduce((acc, p) => {
                acc[0] += p.alimentosPrevistos;
                acc[1] += p.medicamentosPrevistos;
                acc[2] += p.cobertoresPrevistos;
                return acc;
            }, [0, 0, 0]);
            
            return totais;
        }

        function gerarProximos7Dias() {
            const dias = [];
            for (let i = 0; i < 7; i++) {
                const data = new Date();
                data.setDate(data.getDate() + i);
                dias.push(data.toLocaleDateString('pt-BR', { month: 'short', day: 'numeric' }));
            }
            return dias;
        }

        function simularTendencia(tipo) {
            const base = tipo === 'alimentos' ? 50 : tipo === 'medicamentos' ? 20 : 15;
            return Array.from({length: 7}, () => Math.floor(Math.random() * 20) + base);
        }

        function atualizarPredicoes() {
            // Simular atualização
            fetch('/api/ML/ConsultarLocalizacoes')
                .then(response => response.json())
                .then(data => {
                    console.log('Localizações disponíveis:', data);
                    // Aqui você pode fazer predições para cada localização
                    location.reload();
                })
                .catch(error => {
                    console.error('Erro ao atualizar predições:', error);
                    alert('Erro ao atualizar predições. Tente novamente.');
                });
        }

        function treinarModelo() {
            if (confirm('Deseja treinar o modelo com os dados mais recentes?')) {
                fetch('/api/ML/TreinarComDadosSinteticos', { method: 'POST' })
                    .then(response => response.json())
                    .then(data => {
                        alert('Modelo treinado com sucesso!');
                        location.reload();
                    })
                    .catch(error => {
                        console.error('Erro ao treinar modelo:', error);
                        alert('Erro ao treinar modelo. Tente novamente.');
                    });
            }
        }

        function criarAlerta(localizacao) {
            alert(`Alerta criado para ${localizacao}! Equipes serão notificadas.`);
        }
    </script>
}

<style>
    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        border: 1px solid rgba(0, 0, 0, 0.125);
        transition: all 0.3s ease;
    }
    
    .card:hover {
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }
    
    .card-header {
        background-color: #343a40;
        border-bottom: 1px solid rgba(0, 0, 0, 0.125);
        color: white;
    }
    
    .table-hover tbody tr:hover {
        background-color: rgba(0, 0, 0, 0.05);
    }
    
    .opacity-75 {
        opacity: 0.75;
    }
    
    canvas {
        max-height: 400px;
    }

    .popup-content h6 {
        margin-bottom: 10px;
        color: #333;
    }
    
    .popup-content p {
        margin-bottom: 5px;
        font-size: 14px;
    }

    #mapaRegioes {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
    }
</style>